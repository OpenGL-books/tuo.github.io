<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Sirupsen</title>
 <link href="http://sirupsen.github.com/atom.xml" rel="self"/>
 <link href="http://sirupsen.github.com/"/>
 <updated>2013-01-10T22:11:34+08:00</updated>
 <id>http://sirupsen.github.com</id>
 <author>
   <name>Sirupsen</name>
   <email>sirup@sirupsen.com</email>
 </author>

 
 <entry>
   <title>Multitasking makes you dumb</title>
   <link href="http://sirupsen.github.com/multitasking-makes-you-dumb"/>
   <updated>2012-11-05T00:00:00+08:00</updated>
   <id>http:/sirupsen.github.com/multitasking-makes-you-dumb</id>
   <content type="html">&lt;div class=&quot;intro&quot;&gt;
  As part of researching for my 30 days of super productivity, I have explored
  the topics of context switching and multitasking. I found that multitasking has
  a tremendous effect on how we approach tasks and too much multitasking can
  negatively alter how our brain processes information.
&lt;/div&gt;

&lt;p&gt;Multitasking is attempting to handle more than one task simultaneously. The human
mind is not directly capable of this, thus it emulates multitasking by
rapidly alternating between the tasks. This makes for a higher rate of errors
due to lack of attention, and since context switching from one task to another
is expensive, the sum of time spent on the tasks is larger than if the tasks
were done sequentially. (Think green threads with a huge context switch cost
with lots of deadlocks and race conditions.)&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Furthermore, our brain exercises something Dr. Meyer of the University of
Michigan calls “adaptive executive control” where our brain assigns priorities
to the tasks we are performing in parallel.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; For instance, when driving and
talking in cell phone, our brain assigns a higher priority to responding to our
phone conversation than focusing on the road. This deteriorates reaction time to
worse than drivers intoxicated over the 0.08% legal limit.&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;multitasking-impairs-cognitive-control&quot;&gt;Multitasking impairs cognitive control&lt;/h2&gt;

&lt;p&gt;Stanford professors thought before their study on multitasking that people who
frequently multitask must be excellent in recognizing important elements in a
series of tasks:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In one experiment, the groups were shown sets of two red rectangles alone or
surrounded by two, four or six blue rectangles. Each configuration was flashed
twice, and the participants had to determine whether the two red rectangles in
the second frame were in a different position than in the first frame.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;They were told to ignore the blue rectangles, and the low multitaskers had no
problem doing that. But the high multitaskers were constantly distracted by the
irrelevant blue images. Their performance was horrible.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Desperately they attempted to find tasks in which the frequent multitaskers
performed better, such as short term memory and context switching, but
multitaskers failed to show any improvement in any task the Stanford
psychologists presented. Multitaskers have trouble paying attention and are easily
distracted. They have their mind in a myriad of different places at the same
time, not effectively processing any information.&lt;/p&gt;

&lt;p&gt;One last theory involved the possibility of multitaskers being faster at context
switching, performing this all the time, but even here their performance was
inferior:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The test subjects were shown images of letters and numbers at the same time and
instructed what to focus on. When they were told to pay attention to numbers,
they had to determine if the digits were even or odd. When told to concentrate
on letters, they had to say whether they were vowels or consonants.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Again, the heavy multitaskers underperformed the light multitaskers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“They couldn’t help thinking about the task they weren’t doing,” Ophir said.
“The high multitaskers are always drawing from all the information in front of
them. They can’t keep things separate in their minds.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;multitaskers-worse-at-multitasking&quot;&gt;Multitaskers worse at multitasking&lt;/h2&gt;

&lt;p&gt;Effectively, multitaskers train themselves to superficially consume multiple
sources of input from memory and the external world. Their ability to filter
relevance to their current goal declines and they are easily distracted by irrelevant
information. Multitaskers actually become bad at multitasking, by multitasking.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Multitasking students report to have more issues in their academic work.
Students who browse Facebook and instant messaging while doing homework on
average achieve lower grades in school.&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; rel=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; In 1999 16% of media consumption was
combined, in 2005 26% of media was used together. This number must have
skyrocketed since, with Generation Z and Y being its victims.&lt;sup id=&quot;fnref:7&quot;&gt;&lt;a href=&quot;#fn:7&quot; rel=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Human_multitasking&quot;&gt;Human multitasking&lt;/a&gt;&lt;a href=&quot;#fnref:4&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.thenewatlantis.com/docLib/20080605_TNA20Rosen.pdf&quot;&gt;The Myth of Multitasking&lt;/a&gt;&lt;a href=&quot;#fnref:3&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.distraction.gov/download/research-pdf/Comparison-of-CellPhone-Driver-Drunk-Driver.pdf&quot;&gt;A Comparison of the Cell Phone Driver and the Drunk Driver&lt;/a&gt;&lt;a href=&quot;#fnref:5&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://news.stanford.edu/news/2009/august24/multitask-research-study-082409.html&quot;&gt;Media multitaskers pay mental price&lt;/a&gt;&lt;a href=&quot;#fnref:1&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://news.bbc.co.uk/2/hi/technology/8219212.stm&quot;&gt;Multitaskers bad at multitasking&lt;/a&gt;&lt;a href=&quot;#fnref:2&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://blog.reyjunco.com/pdf/JuncoCottenMultitaskingCAE2010.pdf&quot;&gt;Perceived academic effects of instant messaging use&lt;/a&gt;&lt;a href=&quot;#fnref:6&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://blog.reyjunco.com/wp-content/uploads/2010/03/JuncoCottenMultitaskingFBTextCAE2012.pdf&quot;&gt;The relationship between multitasking and academic performance&lt;/a&gt;&lt;a href=&quot;#fnref:7&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Handle passwords with Keychain</title>
   <link href="http://sirupsen.github.com/handle-passwords-with-keychain"/>
   <updated>2012-08-12T00:00:00+08:00</updated>
   <id>http:/sirupsen.github.com/handle-passwords-with-keychain</id>
   <content type="html">&lt;p&gt;I considered &lt;a href=&quot;https://agilebits.com/onepassword&quot;&gt;1password&lt;/a&gt;, but playing with
Keychain, which ships with OS X, I found out it does all I need from a password manager. 
No need for any browser extensions or app store purchases. It’s all built in to OS X. 
Simply understanding how “Save Password” works in the browser is enough to solve
the problem.&lt;/p&gt;

&lt;p&gt;Safari and Chrome both save and fetch passwords from Keychain. You want to have
the encrypted keychain which you’ll store all your passwords in backed up. I store it
in my Dropbox. You can find the default keychain at
&lt;code&gt;~/Library/Keychains/login.keychain&lt;/code&gt;. Once you’ve moved it to your Dropbox, open
&lt;code&gt;Keychain Access&lt;/code&gt; and add it from the file menu. Most of your passwords will 
already be in there. That’s fine.&lt;/p&gt;

&lt;p&gt;You might also want to change the password to the keychain. By default the
password to the login keychain is your user login. You change it by right
clicking it in the left-hand pane.&lt;/p&gt;

&lt;p&gt;Whenever I create a new account, or change a password, I come up with a 
&lt;a href=&quot;http://xkcd.com/936/&quot;&gt;random password&lt;/a&gt; myself and put it in my clipboard. Paste
it when signing up, and when signing in. On sign in I allow Safari/Chrome to remember my password, which means 
it stores the password in Keychain. &lt;/p&gt;

&lt;p&gt;If you ever need the password outside your OS X browser, for instance to sign in to
Twitter on your phone, you can copy the password to the clipboard from &lt;code&gt;Keychain&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/passwords/copy-to-clipboard.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once a password is in Keychain it will auto-fill in your browser, regardless of
how you add it, as long as the “where” attribute is the same as the page you are
currently on:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/passwords/keychain-facebook-details.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/passwords/facebook-autocomplete.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since there’s no magic in adding keys, you can just as well add them from the
command line or in the Keychain app, as long as the “where” attribute (as shown on the
picture above) is right.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;security&lt;/code&gt; also allows you to easily add new passwords with the
&lt;code&gt;add-internet-password&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;    security add-internet-password -a &lt;span class=&quot;s2&quot;&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt; -s foo.com -w pass 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Furthermore, passwords in Keychain can be accessed via &lt;code&gt;security&lt;/code&gt; on the command line:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;    security 2&amp;gt;&amp;amp;1 &amp;gt;/dev/null find-internet-password -gs www.google.com | grep -o &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;.*&amp;quot;&amp;#39;&lt;/span&gt; | sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/&amp;quot;//g&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It will prompt me for the password to the keychain, then output the decrypted
password. This is handy for &lt;a href=&quot;http://www.mutt.org/&quot;&gt;various&lt;/a&gt; &lt;a href=&quot;https://github.com/defunkt/gist/#authentication&quot;&gt;packages&lt;/a&gt; that require passwords.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.jinx.de/Keychain2Go.html&quot;&gt;Keychain2go&lt;/a&gt; exists if you want to bring it to your iPhone.&lt;/p&gt;

&lt;p&gt;You can also add encrypted notes to your keychain, these can be used for credit card
numbers, images, bank account information, secret documents etc.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>My journey to the International Olympiad in Informatics</title>
   <link href="http://sirupsen.github.com/my-journey-to-the-international-olympiad-in-informatics"/>
   <updated>2012-06-26T00:00:00+08:00</updated>
   <id>http:/sirupsen.github.com/my-journey-to-the-international-olympiad-in-informatics</id>
   <content type="html">&lt;p&gt;Back in January &lt;a href=&quot;http://twitter.com/charliesome&quot; title=&quot;Charlie's personal website&quot;&gt;Charlie Somerville&lt;/a&gt; told me about his participation in the &lt;a href=&quot;http://orac.amt.edu.au/&quot; title=&quot;Australian Informatics Competition&quot;&gt;Australian Informatics Competition&lt;/a&gt;, a competition for Australian high school students in informatics. Having done mostly Web development so far, I became quite interested and searched for something similar in Denmark. To my surprise I found a Danish equivalent: &lt;a href=&quot;http://ddd.emu.dk/&quot; title=&quot;Dansk Datalogi Dyst's website&quot;&gt;“Dansk Datalogi Dyst”&lt;/a&gt; (DDD, Danish Informatics Competition). The ultimate goal of the national competitions, Danish as well as Australian, is to be elected as one of four to compete in the &lt;a href=&quot;http://en.wikipedia.org/wiki/International_Olympiad_in_Informatics&quot; title=&quot;Wikipedia Page on IOI&quot;&gt;International Olympiad in Informatics&lt;/a&gt; (IOI), one of many international high school science olympiads. In Denmark the election process for the IOI-team consists of three phases: An online qualification round; where all Danish high schools can participate, The Nationals; competition for the 10 best from the qualification round, and the &lt;a href=&quot;http://www.boi2012.lv/&quot; title=&quot;BOI 2012 website&quot;&gt;Baltic Olympiad&lt;/a&gt;; where the six best from the Nationals compete against each other and participants from the other Nordic and Baltic countries. Finally the four best from the Baltic Olympiad are chosen to compete in IOI.&lt;/p&gt;

&lt;p&gt;This is the story of how I ended up qualifying for the toughest high school programming contest in the world (IOI), without knowing hardly anything about it.&lt;/p&gt;

&lt;h2 id=&quot;solving-an-np-hard-problem-without-knowing-of-np-hard-problems&quot;&gt;Solving an NP-hard problem, without knowing of NP-hard problems&lt;/h2&gt;

&lt;p&gt;Initially I thought the Nationals would conflict with my study trip to Barcelona in mid-March, but when the final dates regarding Barcelona were set, the possibility of making it only 8 hours late to the Nationals appeared. This sudden change of plans meant I had to tackle the qualification round with almost no training. I also discovered all solutions had to be written in C, C++ or Pascal, none of which I knew.&lt;/p&gt;

&lt;p&gt;In mid-February the tasks for the online qualification round were released, and we were given about a week (alongside school) to solve the problems. &lt;a href=&quot;https://www.evernote.com/shard/s30/sh/a249c078-2cff-440d-af2e-af0de21d8d71/5f5c9150efffa0dc627c8b9bbff0ba54&quot; title=&quot;My own translation of the problem from Danish&quot;&gt;The first task&lt;/a&gt; I solved rather quickly (&lt;a href=&quot;http://sirupsen.com/dice&quot;&gt;how I solved it&lt;/a&gt;). I wrote a solution in Ruby, and translated it to the approved language C, with the help of Google and Charlie. Drugged by the eureka-effect I went on to look at &lt;a href=&quot;http://ioinformatics.org/locations/ioi00/contest/day1/car/car.pdf&quot; title=&quot;Problem description&quot;&gt;the second problem&lt;/a&gt; which appeared much harder. The feeling of being able to solve any problem soon wore off. After hours and hours of thinking, I came up with what should reach a perfect solution to the problem. This problem, unlike the other, had feedback upon submission. Enabled feedback means you are able to see how many points your program scored out of the maximum of 100, when you upload it to the submission site. &lt;/p&gt;

&lt;p&gt;The score in IOI-style competitions is based on speed, correctness and memory usage of your program. Furthermore it shows which errors occurred (wrong answer/timeout) during execution on different, unknown test cases. A test case is a pair of input, data given to your program, and output, data expected to be given back by your program for the input. With 500 lines of horrible C code, I was proud to have implemented my “perfect solution”.&lt;/p&gt;

&lt;p&gt;When I uploaded it, I received just 25 points. I was very disappointed, to put it mildly. All the other test cases resulted in timeouts. At that point, it was only a few hours left till deadline. By desperately micro-optimizing with &lt;a href=&quot;http://en.wikipedia.org/wiki/Memoization&quot;&gt;memoization&lt;/a&gt;, optimizing memory usage and lots of other minor things, I was able to get just above 30 points. &lt;/p&gt;

&lt;p&gt;I later found out what I had been trying to solve was an &lt;a href=&quot;http://en.wikipedia.org/wiki/NP-hard&quot;&gt;NP-hard problem&lt;/a&gt; (basically it means that the perfect solution can only be achieved in exponential time, growing by the length of input), without even knowing what an NP-problem was. My program did find optimal solutions, but ran in exponential time, thus it did not receive maximum score because it timed out. You were supposed to find suboptimal solutions, however, not knowing about NP-problems I was certain I could find the optimum solutions (the better the solution, the more points, for this particular task)!&lt;/p&gt;

&lt;p&gt;I was pretty disappointed with myself that I had not been able to score the 100 maximum points in the second task, but even then I already felt like I had learned a lot. I comforted myself with the fact that I had actually scored points with so little training, but did not expect to make it to the Nationals.&lt;/p&gt;

&lt;h2 id=&quot;nationals-with-a-hangover&quot;&gt;Nationals with a hangover&lt;/h2&gt;

&lt;p&gt;In the end of February I received an email that I had been selected to participate in the Nationals in Informatics! Excited for the coming week, I went to Barcelona in mid-March with my class. We had a great trip, and after a physics teacher frighteningly keen on getting us into a strip club and solving [a preparation task][teleports] (teleports) given to us by the team leaders on the plane, I arrived 8 hours late at the boarding school where the Nationals were held.&lt;/p&gt;

&lt;p&gt;The purpose of the national competition is a weekend of intense training rounded off with a 5-hour IOI-style competition. Based on the general impression, results of the qualification tasks and tasks solved during the weekend as well as the results of the competition, 6 of the 10 in the Nationals were chosen to compete in the Baltic Olympiad. &lt;/p&gt;

&lt;p&gt;With no phone numbers of any team leaders or participants, I had no idea where to go as I was looking despairingly at a school building with no lights in any of the windows. I got the idea that they could’ve set up a WiFi for the competition. I walked around campus with my phone in front of me as was it a flashlight, searching for a WiFi, a clue. And finally! A WiFi called “DDD” (Danish acronym for Danish Informatics Competition) appeared in my list of networks. Guided by the increasing WiFi strength I was able to find the right building, in which I could follow the sound of smashing keyboards to find the competition room. As I entered, I was met by 9 guys completely claimed by their laptop screens. I was immediately given all the tasks the other participants were working on or had already completed, and were told they had had lessons in &lt;a href=&quot;http://www.mimuw.edu.pl/~kubica/publications/2001-boi/boi2001.ps&quot;&gt;“Recursion”&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Divide_and_conquer_algorithm&quot;&gt;“Divide and Conquer”&lt;/a&gt;, I was familiar with recursion, but not Divide and Conquer. Googling my way to understand Divide and Conquer, I was able to solve a few of the tasks. However, I was extremely tired, because I had slept roughly 5 hours per night during the Barcelona trip. Around 2 hours after my arrival at 10pm I was almost falling asleep writing my recursive routines, so I decided to close my eyes till we were all advancing to the sleeping quarters..&lt;/p&gt;

&lt;p&gt;After breakfast on saturday, I felt much more energized. The routine was that every 4 hours we’d be introduced to a new “programming concept”, and receive ~2-6 tasks where this, combined with previously introduced concepts, had to be applied. All the solutions had to be submitted to the same site I submitted my qualification solutions to, as it was all part of the final evaluation. The tasks were incredibly challenging, like nothing I had ever tried before. Sometimes in extreme desperation combined with tiredness from the trip, I’d think about taking the next train home. This feeling would disappear with the utter joy and confidence that arose whenever I would finally solve a task, and creep back once again when I found myself still struggling after an hour on a new problem. But this kept me going. By saturday afternoon, I had almost managed to get up to speed with the others, and were doing the same tasks as them.&lt;/p&gt;

&lt;p&gt;On sunday morning we were introduced to the last concept, &lt;a href=&quot;http://en.wikipedia.org/wiki/Dynamic_programming&quot;&gt;dynamic programming&lt;/a&gt;, after doing a few dynamic programming problems, the 5-hour National competition started. These tasks were even more difficult. I was able to solve the first one to about 60 points (out of the maximum 100). On paper I came up with a solution to the second problem, but I did not manage to successfully implement it within the timeframe. With a total of 60 points, I assessed my own chance of proceeding to the next stage, the Baltic Olympiads, rather slim. Even then, I was satisfied with my own performance during the weekend: Managing to catch up while being 8 hours behind, and achieving 60 points in the Nationals having only solved in the region of 4-5 tasks in total before the training camp! It is by far the weekend in my life in which I have learnt the most. I would find out if I was one of the six to go to Latvia for the Baltic Olympiad at the science olympiad reception a month later, but I did not bet on it.&lt;/p&gt;

&lt;h2 id=&quot;science-olympiad-reception-with-a-cheerful-surprise&quot;&gt;Science olympiad reception with a cheerful surprise&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Carlsberg_Group&quot; title=&quot;Wikipedia page on Carlsberg&quot;&gt;Carlsberg, Denmark&lt;/a&gt; is the main sponsor of the Science Olympiads in Denmark. In Denmark we have teams for: Geography, physics, mathematics, informatics, biology and chemistry. In the end of April, all the participants in the Nationals had come to the reception in Denmark’s capital, Copenhagen to hear the announcements of the final teams. Our minister of “children and education” held a speech, so did the leader of the physics team, and the director of the foundation that Carlsberg has for supporting science. One of the consistent themes of the speeches (except for our minister) was that it is a pity with so little focus on what they called the “elite students” in the Danish education system. They praised the system for being very good at handling the weak students, but criticized it for not being equally good at challenging the top students. There was no press at the event.&lt;/p&gt;

&lt;p&gt;The director of the Carlsberg science foundation announced the names of those who were on the national teams: mathematics, physics, biology, .. and then, finally, informatics. As I heard my name, I was flabbergasted. I took the train back home, happy that my informatics adventures were not over yet for this year.&lt;/p&gt;

&lt;h2 id=&quot;studying-knuth&quot;&gt;Studying Knuth&lt;/h2&gt;

&lt;p&gt;Because I did not expect to qualify for the Baltic Olympiad, I had not trained up to the reception. With only about a week to the Baltics, I armed myself with a borrowed copy of &lt;a href=&quot;http://en.wikipedia.org/wiki/The_Art_of_Computer_Programming&quot; title=&quot;Wikipedia page on Knuth's bible&quot;&gt;“The Art of Computer Programming”&lt;/a&gt;, working through the exercises, read up on common algorithms on Wikipedia, completed tasks on &lt;a href=&quot;http://ace.delos.com/usacogate&quot; title=&quot;USACO, I recommend this for getting started&quot;&gt;USACO&lt;/a&gt;, and memorized the critical parts of my Vim config for the competition computers. I managed to create quite an intense training weekend for myself, although regretting not having had more optimism for proceeding to the Baltics by preparing prior to the reception, I felt much more ready on the other side of the weekend. &lt;a href=&quot;http://firmafon.dk&quot;&gt;Firmafon&lt;/a&gt;, where I work, was kind enough to give me my own copy of Knuth’s compilation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/ioi/knuth.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-baltic-olympiad-in-informatics-and-europes-widest-waterfall&quot;&gt;The Baltic Olympiad in Informatics and Europe’s widest waterfall&lt;/h2&gt;

&lt;p&gt;With the other 5 participants, of which 4 had participated before, and two team leaders who were previous participants, we flew to Riga, Latvia and drove to Ventspils with the Finnish team. IOI-style international competitions like BOI consists of two competition days, each of 5 hours with 3 tasks.&lt;/p&gt;

&lt;p&gt;About one hour into the competition on the first day, my excitement had soon been replaced by the all familiar balance between frustration and encouragement when finally figuring something out. The tasks were even more difficult than those at the Nationals, so I decided to focus all my energy into &lt;a href=&quot;http://www.boi2012.lv/data/day1/eng/mobile.pdf&quot;&gt;a single task&lt;/a&gt; (&lt;a href=&quot;http://sirupsen.com/mobile&quot;&gt;my approach to solving it&lt;/a&gt;), where I managed to come up with a solution which I calculated would yield around 30 points (too slow for larger input). After the competition I talked with the other Danish participants who had participated before, who said the tasks were indeed more difficult than usual. Few had gotten anything working at all.&lt;/p&gt;

&lt;p&gt;The citizens of Ventspils seemed very proud of their city, so in lieu of the much needed nap we were all craving after 5 hours of brain-tumbling in the competition room, we went on one of many excursions to see Ventspils, a small tourist city with a population of around 40 000. At the end of the excursion we arrived at an adventure park, where we received the day’s competition results in a letter. Surprisingly, 4/6 of the Danish team had achieved 0/300 points on the first day. Including me. I couldn’t quite figure out what went wrong with my program, talking with the other teammates it seemed like a small off-by-one mistake. Aww. Many of the other teams had similar results. A tired, disappointed Danish team went back to the hotel to get some sleep before the next competition day.&lt;/p&gt;

&lt;p&gt;The difficulty on the second day was much like the first. Thus I decided to once again devote all the time to &lt;a href=&quot;http://www.boi2012.lv/data/day2/eng/fire.pdf&quot;&gt;a single task&lt;/a&gt;, exploring edge-cases with pen and paper, rethinking even the most trivial logic. Once again, I was quite sure I had figured out a 30-point solution. But when we received our results, it turned out I had only received 10 points on the second day.&lt;/p&gt;

&lt;p&gt;According to the other, more experienced Danish participants the tasks had been unusually difficult, and normally you get more points for a slow, working solution (like mine on the second day), about 30-40 points. The 10 points from the second day became my final score, I was &lt;a href=&quot;boiresults&quot;&gt;positioned as the fifth dane&lt;/a&gt;, so I was rather certain to not get on the IOI-team of 4. I was disappointed now that I had come so far, but taken the experience of the other participants into consideration, I could be quite happy with my result, and follow my plan to go all-in next year. I chose to focus on the wrong tasks on both days, wrong because they were not the easiest, even if they looked like that at a first glance. But these are the kinds of things you learn from experience. Once again, I had learned a lot, and I had a great time with the team in Latvia.&lt;/p&gt;

&lt;p&gt;They loved taking us out for excursions, preferably several per day, to see old Soviet radars, light towers, trains and Europe’s widest waterfall, which we drove a total of 3 hours to see….&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/ioi/waterfall.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Europe’s widest waterfall (impressive height: ~0.5 meter) in Kuldiga, Latvia&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.boi2012.lv/tasks&quot;&gt;All tasks for BOI 2012.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;competition-lessons&quot;&gt;Competition lessons&lt;/h2&gt;

&lt;p&gt;From BOI and the Nationals I learned that you must avoid digging holes. Repeatedly I found myself so fixated on getting a particular idea to work I’d get absolutely nowhere. Sometimes you have to bite the bullet, delete your program, find a new sheet of paper, and start from scratch. A good smell of this is when you start working around your general solution to the problem to solve specific edge-cases. I learned that there is almost always a simple way to solve the problem without explicitly handling edge-cases. If there are two edge-cases, there’s almost certainly two more. The simple solution will handle edge-cases automatically, even those you might have not considered.&lt;/p&gt;

&lt;p&gt;In the IOI-style competitions where you can achieve partial scores (i.e. the results are not binary: completed/not completed, as in most University competitions), thus it’s wise to create naive, slow solutions scoring 30-40 points for a task (except at Baltics in 2012, where doing so proved to be difficult). Being able to quickly spot the tasks where this is possible, can let you achieve easy points. Enough easy points can even grant you a medal. Afterwards, you can go back in the remaining time to improve on your solution.&lt;/p&gt;

&lt;p&gt;It’s paramount to perform all thinking on paper. I wrote all my algorithms in plain English, which worked well to find holes and explore edge cases. I applied the algorithm on paper on test cases I made up myself. When writing it out in English I sometimes found myself writing “then just..”, this is a smell. Often these “just”-lines required fundamental change in my solution. Do not defer thinking till you get to do the actual implementation. Expanding a “just” takes 5 minutes, and these are always saved, usually multiple times. During the implementation you are inclined to not think of a proper solution to the subproblem, and you will just hack your way around it. You then must return to paper immediately. Pen and paper are life savers. The thinking done when implementing should be minimal.&lt;/p&gt;

&lt;h2 id=&quot;now&quot;&gt;Now&lt;/h2&gt;

&lt;p&gt;In the beginning of June I received an email saying I was chosen as one of the four to compete for Denmark in IOI 2012, Italy in September! I try to do a few problems a week as preparation, and I participate in online competitions like &lt;a href=&quot;http://www.codeforces.com/&quot;&gt;Codeforces&lt;/a&gt; and &lt;a href=&quot;http://www.topcoder.com/&quot;&gt;Topcoder&lt;/a&gt;. I contacted the local university (&lt;a href=&quot;http://www.au.dk/&quot;&gt;Aarhus University&lt;/a&gt;) for a mentor in algorithms, and got a phD student to point me in the right directions.&lt;/p&gt;

&lt;p&gt;I have learned much by visiting “the other side”, and I am looking forward to learn more. My problem-solving skills have increased tremendously. Coming from doing only Web development where the difficulties lie in structuring your application, it has been amazing to try and solve hard problems using algorithms and hours of thinking. It’s so incredibly satisfying to solve a problem you’ve worked several hours on.&lt;/p&gt;

&lt;p&gt;I can continue to bring many of the things I learn from the competitions into my day-to-day work. I see more and more opportunities, interesting ways to process data and I am starting to understand how some of the magical services actually work underneath. It opens many possibilities for me as a developer. Combining different algorithms and data structures, I can make applications I never dreamt of creating. It has a brought a unique and fundamental missing tool to my toolbox. My ultimate goal is to win a medal in IOI 2013 in Brisbane, Australia, which is the last year in which I can compete, because I finish high school next year. Now I am looking forward to Italy in September, and I’ll be sure to do a writeup when I am on the other side of that.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Quotes</title>
   <link href="http://sirupsen.github.com/quotes"/>
   <updated>2011-07-31T00:00:00+08:00</updated>
   <id>http:/sirupsen.github.com/quotes</id>
   <content type="html">&lt;p&gt;Quotes are beautiful, because beauty is raising curiosity.&lt;/p&gt;

&lt;p&gt;This is my evolving growing list of favorite quotes. Originally I planned to add why I like them, but I’ve left them beautiful.&lt;/p&gt;

&lt;p&gt;“Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.” 
- Antoine de Saint-Exupery&lt;/p&gt;

&lt;p&gt;“Make things as simple as possible but no simpler.”
- Albert Einstein&lt;/p&gt;

&lt;p&gt;“Less is more.” &lt;/p&gt;

&lt;p&gt;“Those who are crazy enough to think they can change the world usually do.”
- Steve Jobs&lt;/p&gt;

&lt;p&gt;“Don’t compare yourself to others. Compare yourself to the progress you’ve made.”&lt;/p&gt;

&lt;p&gt;“The potential of greater good goes right along with the potential for greater evil.”
- Larry Wall&lt;/p&gt;

&lt;p&gt;“Humans are allergic to change. They love to say, ‘We’ve always done it this way.’ I try to fight that. That’s why I have a clock on my wall that runs counter-clockwise.”
- Grace Hooper&lt;/p&gt;

&lt;p&gt;“Great minds discuss ideas. Average minds discuss events. Small minds discuss people.”
- Eleanor Roosevelt&lt;/p&gt;

&lt;p&gt;“Everything goes with bacon!”
- Grant Achatz, Alinea&lt;/p&gt;

&lt;p&gt;“In theory there is no difference between theory and practice. But, in practice, there is.”
- Jan van de Snepscheut&lt;/p&gt;

&lt;p&gt;“Experience is what you get when you didn’t get what you wanted.”
- Randy Pausch&lt;/p&gt;

&lt;p&gt;“When you don’t create things, you become defined by your tastes rather than ability. So create.”
- why&lt;/p&gt;

&lt;p&gt;“If you live each day as it was your last, someday you’ll most certainly be right.”
- Steve Jobs&lt;/p&gt;

&lt;p&gt;“You can’t connect the dots looking forward; you can only connect them looking backwards.”
- Steve Jobs&lt;/p&gt;

&lt;p&gt;“Stay hungry, stay foolish.”
- Whole Earth Catalog&lt;/p&gt;

&lt;p&gt;“Make every detail perfect. Limit the number of details.”
- Jack Dorsey&lt;/p&gt;

&lt;p&gt;“If I had asked people what they wanted, they would have said faster horses.”
- Henry Ford&lt;/p&gt;

&lt;p&gt;“Pressure makes diamonds”&lt;br /&gt;
- General George S. Patton&lt;/p&gt;

&lt;p&gt;“Change only takes place through action.”
- Dalai Lama&lt;/p&gt;

&lt;p&gt;“Bad ideas are just waiting to become bad ass.”&lt;/p&gt;

&lt;p&gt;“Shut the hell up and do it.”&lt;/p&gt;

&lt;p&gt;“The greatest advantage usually’s also the biggest disadvantage.”&lt;/p&gt;

&lt;p&gt;“Experience comes from bad judgement.”&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Paperless with Evernote</title>
   <link href="http://sirupsen.github.com/paperless-with-evernote"/>
   <updated>2011-07-26T00:00:00+08:00</updated>
   <id>http:/sirupsen.github.com/paperless-with-evernote</id>
   <content type="html">&lt;p&gt;As a student, I get tons of paper everyday. The greatest issue with paper is finding the right one once it’s needed, without going through every single paper you have. Organizing paper is tedious.&lt;/p&gt;

&lt;p&gt;This is where computers shine. You don’t even have to invent fancy directory structures; Spotlight in OS X, or Search in Windows can match you up with the right file with just a few keystrokes.&lt;/p&gt;

&lt;p&gt;That said, paper has great advantages attached, too – it’s brilliant for e.g. sketching and brainstorming. I wouldn’t ever leave paper completely behind, I use my Moleskin frequently for these kinds of tasks, but that’s about the only paper I use. A hybrid-solution is &lt;a href=&quot;http://www.livescribe.com/en-us/&quot;&gt;Livescribe&lt;/a&gt;, I have one, and used it for some time, but eventually ditched it: the pros of writing notes directly on the computer outweighed the pros of using Livescribe, simply because I can type faster on my computer.&lt;/p&gt;

&lt;p&gt;By being paperless you’ll use less time searching through your paper stacks, you’ll become much more organized, and you’ll always have your paper at hand.&lt;/p&gt;

&lt;p&gt;Nowadays I scan everything with my &lt;a href=&quot;http://www.getdoxie.com/&quot;&gt;Doxie&lt;/a&gt;, you can use any scanner, of course, if you don’t already have one though, get the Doxie. It’s compact, portable, scans in good quality and &lt;a href=&quot;http://www.getdoxie.com/store/faq_ajax.html#hearts&quot;&gt;has hearts on it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All the scanned documents go to &lt;a href=&quot;http://www.evernote.com/about/referrer?code=Simo8188&quot;&gt;Evernote&lt;/a&gt; for four reasons: first being that it’s all in the cloud, that means I can access my documents anywhere, which brings me to the second reason: great mobile apps. Third, the search functionality is excellent and that becomes even better due the final reason, OCR – Optical Character Recognizition – all my scanned document PDFs are scanned for text, and Evernote’s search will search through this text as well. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://f.cl.ly/items/2T3a182G0C1M463K2i46/Screen%20Shot%202011-07-26%20at%2020.51.36%20.png&quot; alt=&quot;Picture example of Evernote's OCR&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That means all your papers’ text are searchable by Evernote. It even recognizes handwriting. OCR happens in Evernote’s cloud and the metadata is synced along with your notes so it’ll work everywhere Evernote works.&lt;/p&gt;

&lt;p&gt;Every sunday I scan new paper acquired during the previous week, the Doxie software puts the scanned papers directly into Evernote, I give it a descriptive title, throw out the paper, and I’m done. That’s it. &lt;/p&gt;

&lt;p&gt;I don’t use tags, special notebooks, or any of Evernote’s other fancy organization features. There’s simply no need with Evernote’s fantastic searching capabilities. I only follow a simple syntax for my notes’ titles:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	&amp;lt;area&amp;gt; &amp;lt;title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;receipt doxie scanner&lt;/li&gt;
  &lt;li&gt;sirupsen.com paperless post&lt;/li&gt;
  &lt;li&gt;recipe dad’s lasagna&lt;/li&gt;
  &lt;li&gt;physics potential energy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I want to browse all my receipts, I search for “receipt”, if I want all notes containing “Doxie” I search for Doxie, and Evernote would return “receipt doxie scanner” and “sirupsen.com paperless post” to me. You should definitely get Evernote premium if you start using it for your scanned documents for prioritized OCR on their servers, more storage and to support an excellent service.&lt;/p&gt;

&lt;p&gt;For quick scans on the go, mostly receipts, I use &lt;a href=&quot;http://itunes.apple.com/us/app/jotnot-scanner-pro/id307868751?mt=8&quot;&gt;JotNot Pro&lt;/a&gt; iPhone – it works great and can throw the pictures directly to the Evernote app.&lt;/p&gt;

&lt;p&gt;In classes I take notes directly in Evernote for several reasons. Typing on the computer is simply heaps faster than writing on paper, the only thing I miss from paper is the ability to make quick, rough illustrations.&lt;/p&gt;

&lt;p&gt;As physics and mathematics are part of my school work I frequently have to put equations into my notes. Evernote has no built-in functionality that lets you do this, but &lt;a href=&quot;http://www.chachatelier.fr/latexit/latexit-home.php?lang=en&quot;&gt;LaTeXiT&lt;/a&gt; that comes with the &lt;a href=&quot;http://www.tug.org/mactex/2011/&quot;&gt;MacTex&lt;/a&gt; bundle comes with a service that lets you transform LaTeX math to pretty pictures:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://f.cl.ly/items/1j0Z3Q0o0K1g3z082k03/Screen%20Shot%202011-07-26%20at%2020.39.36%20.png&quot; alt=&quot;LaTeX equation transforming with LaTeXiT&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Gives you:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://f.cl.ly/items/3t2P2D1m2B1a01451g33/Screen%20Shot%202011-07-26%20at%2020.41.21%20.png&quot; alt=&quot;Result picture from LaTeXiT transformagic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’m no pro in Automator, if you happen to know how to create this functionality indepent of LaTeXiT (because LaTeXiT is slow), please contact me and I’ll include it here.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>How I get shit done</title>
   <link href="http://sirupsen.github.com/how-I-get-shit-done"/>
   <updated>2011-05-28T00:00:00+08:00</updated>
   <id>http:/sirupsen.github.com/how-I-get-shit-done</id>
   <content type="html">&lt;p&gt;Today I decided to ditch my to do list.&lt;/p&gt;

&lt;p&gt;The important tasks will constantly nag me, thus the most important tasks will always be fresh in my head. I never forget the main tasks.&lt;/p&gt;

&lt;p&gt;I do, however, forget the minor, less important tasks. The actually used part of my to do list ended up being a shopping list, and I don’t need a full-blown GTD-application to keep track of my errands. The other minor tasks I’d forget were 2-minute tasks. Resolved easily by doing the task immediately after thinking of it instead of deferring it.&lt;/p&gt;

&lt;p&gt;The real problem I was trying to solve with my to do list was procrastinating. Every Sunday I now make a list of what I need to do in the coming week, writing down tasks for each day, scattering the major tasks throughout the week. Now when I’m done with the day’s tasks I can relax feeling confident I’m on track for the week. That’s real relaxation.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Stop relying on your ORM and learn SQL</title>
   <link href="http://sirupsen.github.com/stop-relying-on-your-orm-and-learn-sql"/>
   <updated>2011-03-02T00:00:00+08:00</updated>
   <id>http:/sirupsen.github.com/stop-relying-on-your-orm-and-learn-sql</id>
   <content type="html">&lt;p&gt;In modern development, and in particular with web frameworks such as Rails that offer and encourage extensive use of database ORM libraries, some developers skip learning SQL in favour of using ORMs. It is as if developers think they no longer need to know SQL when they’ve got an ORM. The truth is that we are not this fortunate. You should &lt;em&gt;only&lt;/em&gt; use an ORM if you know exactly what it is generated by the ORM and you are sure that the generated SQL is as well performing as what you could have written by hand.&lt;/p&gt;

&lt;p&gt;Let me go through the most common pitfall I see.&lt;/p&gt;

&lt;p&gt;You have a blog listing a bunch of posts: title, content, author, date and the number of associated comments. &lt;/p&gt;

&lt;p&gt;Typically one would do it like this in Rails:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;erb&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@posts&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;  &amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;  &amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;  &amp;lt;p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; posted on &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;created_at&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; comments&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;  &amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This looks simple enough, and it is – the issue here is the query for retrieving the number of comments associated (&lt;code&gt;post.comments.count&lt;/code&gt;) is run for each blog post, although it could easily be included in the main SQL query fetching the posts with a join:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comments_count&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;quot;users&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;quot;comments&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or in Rails’ ORM:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:joins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:comments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;posts.*, count(comments.id) as comments_count&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;posts.id&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For a typical blog an extra 20 count queries are not critical, but once your database reaches a certain size a noticeable, avoidable, delay will occur on that page. Something that could have been avoided with a basic understanding of SQL.&lt;/p&gt;

&lt;p&gt;ORMs are indeed very useful to developers, however you should not neglect learning SQL because you have it.&lt;/p&gt;

&lt;p&gt;Every time you use your ORM you should stop for a moment and think to yourself: “Can I be sure the ORM is generating the optimum query possible here?”&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Improving the Open Source user experience</title>
   <link href="http://sirupsen.github.com/improving-the-open-source-user-experience"/>
   <updated>2011-02-25T00:00:00+08:00</updated>
   <id>http:/sirupsen.github.com/improving-the-open-source-user-experience</id>
   <content type="html">&lt;h2 id=&quot;draft&quot;&gt;Draft&lt;/h2&gt;

&lt;p&gt;I absolutely love open source, I contribute myself and I use tons of open source software every day. I am attached to the idea that what I use is completely open, I can change everything about it if I want, I can figure out how it works, learn from it, contribute to it. Open source is many things: browsers, databases, operating systems and what not.&lt;/p&gt;

&lt;p&gt;However, there’s one thing I always thought could be drastically improved in many open source projects: The User Experience. When I ask a not-so-techinal friend why they don’t use &lt;em&gt;some open source project instead of commercial one&lt;/em&gt; many say that “it’s because ugly”. What they mean by ugly is that it’s hard to find what you are looking for in the interface, and yeah, it’s usually not eye candy either.&lt;/p&gt;

&lt;p&gt;Most open source projects have no designers attached. However, some do, for instance &lt;a href=&quot;https://wiki.ubuntu.com/Artwork&quot;&gt;Ubuntu&lt;/a&gt;, most people, again non-techinal people, I know like Ubuntu because it’s pretty and easy to use:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For every % in sales invested in product design, a company’s sales and profits rise 3-4% on average.
From &lt;a href=&quot;http://www.amazon.com/Whole-New-Mind-Right-Brainers-Future/dp/1594481717&quot;&gt;A Whole New Mind&lt;/a&gt;, p. 78&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is relevant for open source too; good product design attract users.&lt;/p&gt;

&lt;p&gt;People tend to design for themselves, and generally it just doesn’t work when developers create software for non-developers. Even so, developers are taking care of designing and implementing the user interface in the majority of open source projects. Leaving us with an unconsistent, probably not well thought through, interface that is very much hacked together and is something the developers just want to get over with. Most importantly: An interface which may confuse users. Designing interfaces usually is not what developers enjoy doing the most, very much reflected in the finished interface. &lt;/p&gt;

&lt;p&gt;This is where the designers come in; we need designers to help the developers to create amazing frontends for the open source applications.&lt;/p&gt;

&lt;p&gt;There are a couple of problems dragging designers into open source projects, and we can start addressing the reason why it hasn’t happened a lot in the past. To put it briefly: Designers are scared of developers. Developers speak a foreign language, they are like aliens. Developers don’t package their source code in .zip files, instead we use some scary thing called version control. The frontends typically presuposes a pretty extensive knowledge of the backend, a knowledge the designers simply don’t have and will have a pretty tough time getting. Designers don’t know how to modify a QT GUI, although they may have a daunting idea on how the interface could be so much better.  &lt;/p&gt;

&lt;p&gt;How do we solve this? Communication. Developers need to get in touch with the designers and talk with them about how they can get the designers started contributing. For a web application, a skilled web designer might have an easier time than with a GUI, but communication is still required to understand the interface’s needs as well as implementation details in terms of communicating with the back end.&lt;/p&gt;

&lt;p&gt;The designers I have talked to would love to get involved, the motivation is there they get to put this on their portfolio and they enjoy designing – the crucial thing is communication and getting started. Designers want to have easy access to developers of the project they can ask all kinds of questions, developers that might also help the designer implement the interface change itself. IRC is probably not the designer’s favorite communication channel, but it’s the only one developers know and it’s a great way to perform a group chat, involving the entire community around the project.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Setting up Unicorn with Nginx</title>
   <link href="http://sirupsen.github.com/setting-up-unicorn-with-nginx"/>
   <updated>2010-10-22T00:00:00+08:00</updated>
   <id>http:/sirupsen.github.com/setting-up-unicorn-with-nginx</id>
   <content type="html">&lt;p&gt;Unicorn is an interesting Unix Ruby HTTP server which &lt;a href=&quot;http://tomayko.com/writings/unicorn-is-unix&quot;&gt;makes great use of Unix&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Unicorn is an HTTP server for Rack applications designed to only serve fast
clients on low-latency, high-bandwidth connections and take advantage of
features in Unix/Unix-like kernels.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this post I’ll describe Unicorn’s design then walk you through setting it up.&lt;/p&gt;

&lt;h1 id=&quot;unicorns-design&quot;&gt;Unicorn’s design&lt;/h1&gt;

&lt;p&gt;Unicorn follows the Unix philosophy:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Do one thing and do it right.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For instance, load balancing in Unicorn is done by the OS kernel and Unicorn’s
processes are controlled by Unix signals.&lt;/p&gt;

&lt;p&gt;Unicorn’s design is officially described &lt;a href=&quot;http://unicorn.bogomips.org/DESIGN.html&quot;&gt;here&lt;/a&gt;. I will list some of
the things which I consider core for why Unicorn is an interesting alternative.&lt;/p&gt;

&lt;h2 id=&quot;load-balancing&quot;&gt;Load balancing&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Load balancing between worker processes is done by the OS kernel. All workers share a common set of listener sockets and does non-blocking accept() on them. The kernel will decide which worker process to give a socket to and workers will sleep if there is nothing to accept().&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Load balancers conventionally reverse proxy the request to the worker that is &lt;em&gt;most likely&lt;/em&gt;
to be ready. This assumption is usually based purely on whenever that worker
last served a request. This suffers from two evident disadvantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Some requests take longer to complete (e.g. heavy I/O, slow client)&lt;/li&gt;
  &lt;li&gt;Software fails and times out&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The common load balancer does not account for this, queueing clients at
workers behind slow requests.&lt;/p&gt;

&lt;p&gt;Unicorn solves this problem with a pull-model rather than a push-model. All
requests are initially queued at the master on a Unix socket, workers
&lt;code&gt;accept(2)&lt;/code&gt; (pull) requests off the queue (shared Unix socket) when they are
ready. Thus requests are always handled by a worker which can handle request
immediately. This solves the problems mentioned above.&lt;/p&gt;

&lt;h2 id=&quot;slow-clients&quot;&gt;Slow clients&lt;/h2&gt;

&lt;p&gt;Slow clients slow down everything. Twitter has shed some light on this issue in
&lt;a href=&quot;http://engineering.twitter.com/2010/03/unicorn-power.html&quot;&gt;their blog post&lt;/a&gt; on why they moved to Unicorn:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Every server has a fixed number of workers that handle incoming requests.
During peak hours, we may get more simultaneous requests than available
workers. We respond by putting those requests in a queue.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Welcome to Unicorn’s world of evented I/O:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is unnoticeable to users when the queue is short and we handle requests
quickly, but large systems have outliers. Every so often a request will take
unusually long, and everyone waiting behind that request suffers. Worse, if an
individual worker’s line gets too long, we have to drop requests. You may be
presented with an adorable whale just because you landed in the wrong queue at
the wrong time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And then they continue to talk about supermarket queues, &lt;a href=&quot;http://engineering.twitter.com/2010/03/unicorn-power.html&quot;&gt;read the whole thing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the conventional web server using the busyness heuristic to determine where
to push the request, you have many short queues at each worker. Easily, a lot of
fast requests can end up behind slow requests, because they are distributed
essentially randomly, which means your request can timeout simply because you
were unlucky enough to end up behind a slow request.&lt;/p&gt;

&lt;p&gt;Because of Unicorn’s long queue model, this will not happen. Instead, you will
be taken off the long queue quickly and slow requests will fail in isolation.&lt;/p&gt;

&lt;h2 id=&quot;deploying&quot;&gt;Deploying&lt;/h2&gt;

&lt;p&gt;With Unicorn one can deploy with &lt;em&gt;zero&lt;/em&gt; downtime. This is rad stuff:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can upgrade Unicorn, your entire application, libraries and even your Ruby interpreter without dropping clients.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Unicorn master and worker processes &lt;a href=&quot;http://unicorn.bogomips.org/SIGNALS.html&quot;&gt;respond&lt;/a&gt; to Unix signals.
Here’s what Github does:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;First we send the existing Unicorn master a &lt;code&gt;USR2 SIGNAL&lt;/code&gt;. This tells it to
begin starting a new master process, reloading all our app code. When the new
master is fully loaded it forks all the workers it needs. The first worker
forked notices there is still an old master and sends it a QUIT signal.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;When the old master receives the QUIT, it starts gracefully shutting down its
workers. Once all the workers have finished serving requests, it dies. We now
have a fresh version of our app, fully loaded and ready to receive requests,
without any downtime: the old and new workers all share the Unix Domain Socket
so nginx doesn’t have to even care about the transition.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;We can also use this process to upgrade Unicorn itself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Unicorn’s signal handling is described &lt;a href=&quot;http://unicorn.bogomips.org/SIGNALS.html&quot;&gt;here&lt;/a&gt;.
Github has &lt;a href=&quot;http://github.com/defunkt/unicorn/blob/master/examples/init.sh&quot;&gt;shared their init&lt;/a&gt; for Unicorn, which sends the appropriate signals
according to the spec for various actions. This makes 100% uptime possible,
without any significant speed drop since children are slowly restarted.&lt;/p&gt;

&lt;h1 id=&quot;rails-on-unicorns&quot;&gt;Rails on Unicorns&lt;/h1&gt;

&lt;p&gt;We’re going to set up &lt;a href=&quot;http://nginx.org&quot;&gt;nginx&lt;/a&gt; in front of Unicorn.&lt;/p&gt;

&lt;h2 id=&quot;nginx&quot;&gt;nginx&lt;/h2&gt;

&lt;p&gt;Start by installing &lt;a href=&quot;http://nginx.org&quot;&gt;nginx&lt;/a&gt; via your favorite package manager. Afterwards
we need to configure it for Unicorn. We’ll grab &lt;a href=&quot;http://github.com/defunkt/unicorn/blob/master/examples/nginx.conf&quot;&gt;the &lt;code&gt;nginx.conf&lt;/code&gt; example
configuration shipped with Unicorn&lt;/a&gt;, the nginx configuration file is
usually located at &lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt;, so place it there, and tweak it to
your likings, read the comments–they’re quite good.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;nginx.conf&lt;/code&gt; you may have stumbled upon this line:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;user nobody nogroup; &lt;span class=&quot;c&quot;&gt;# for systems with a &amp;quot;nogroup&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;While this works, it’s generally adviced to run as a seperate user (which we
have more control over than nobody) for security reasons and increased control.
We’ll create an nginx user and a web group.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo useradd -s /sbin/nologin -r nginx
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo usermod -a -G web nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Configure your static path in &lt;code&gt;nginx.conf&lt;/code&gt; to &lt;code&gt;/var/www&lt;/code&gt;, and change the owner
of that directory to the web group:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo mkdir /var/www
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo chgrp -R web /var/www &lt;span class=&quot;c&quot;&gt;# set /var/www owner group to &amp;quot;web&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo chmod -R 775 /var/www &lt;span class=&quot;c&quot;&gt;# group write permission&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Add yourself to the web group to be able to modify the contents of &lt;code&gt;/var/www&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo usermod -a -G web USERNAME
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;unicorn&quot;&gt;Unicorn&lt;/h2&gt;

&lt;p&gt;Now we have nginx running. Install the Unicorn gem:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install unicorn
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You should now have Unicorn installed: &lt;code&gt;unicorn&lt;/code&gt; (for non-Rails rack
applications) and &lt;code&gt;unicorn_rails&lt;/code&gt; (for Rails applications version &amp;gt;= 1.2) should
be in your path.&lt;/p&gt;

&lt;p&gt;Time to take it for a spin! (You may wish to re-login with &lt;code&gt;su - USERNAME&lt;/code&gt; if
you haven’t already, this ensures your permission tokens are set, otherwise you
will not have write permission to &lt;code&gt;/var/www&lt;/code&gt;.)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /var/www
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rails new unicorn
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There we go, we now have our Unicorn Rails test app in &lt;code&gt;/var/www&lt;/code&gt;! Let’s fetch a
Unicorn config file. We’ll set our starting point in the example configuration
that ships with the Unicorn source:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl -o config/unicorn.rb https://raw.github.com/defunkt/unicorn/master/examples/unicorn.conf.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You will want to tweak a few things to set the right paths:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;APP_PATH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/var/www/unicorn&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;working_directory&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;APP_PATH&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stderr_path&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;APP_PATH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/log/unicorn.stderr.log&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stdout_path&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;APP_PATH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/log/unicorn.stderr.log&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;APP_PATH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/tmp/pid/unicorn.pid&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then Unicorn is configured!&lt;/p&gt;

&lt;h2 id=&quot;rainbow-magic&quot;&gt;Rainbow magic&lt;/h2&gt;

&lt;p&gt;Start the nginx deamon, this depends on your OS. Then start Unicorn:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;unicorn_rails -c /var/www/unicorn/config/unicorn.rb -D
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;-D&lt;/code&gt; deamonizes it. &lt;code&gt;-c&lt;/code&gt; specifies the configuration file. In production you
will probably want to pass &lt;code&gt;-E production&lt;/code&gt; as well, to run the app in the
production Rack environment.&lt;/p&gt;

&lt;p&gt;That’s it! Visiting &lt;a href=&quot;http://localhost&quot;&gt;localhost&lt;/a&gt; should take you to the Rails default page.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>A Rubyist's development environment</title>
   <link href="http://sirupsen.github.com/a-rubyists-development-environment"/>
   <updated>2010-09-19T00:00:00+08:00</updated>
   <id>http:/sirupsen.github.com/a-rubyists-development-environment</id>
   <content type="html">&lt;p&gt;I consider myself as a Rubyist and a minimalist. I want my tools to be few, and sharp. That means I only want few tools, but I want to master these tools.
Now it’s been about a year since I started programming, this post is supposed to give you a look into my toolbox. I hope it can be of inspiration to you.&lt;/p&gt;

&lt;p&gt;I’ve open sourced all my dotfiles &lt;a href=&quot;http://github.com/Sirupsen/dotfiles&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;operating-system-linux-and-mac&quot;&gt;Operating System: Linux and Mac&lt;/h2&gt;

&lt;p&gt;My primary development platform is my desktop running &lt;a href=&quot;http://sirupsen.com/my-experience-with-arch-linux&quot; title=&quot;See my blog post about my experience with Arch Linux&quot;&gt;Arch Linux&lt;/a&gt;. It’s a dual screen setup, which I learned to &lt;em&gt;love&lt;/em&gt;. I also own a Macbook, primarily used for schoolwork and field coding.&lt;/p&gt;

&lt;p&gt;As for my desktop setup of noteworthy tools besides my editor, I use bleeding-edge Chromium as my browser. I might switch to &lt;a href=&quot;http://www.uzbl.org/&quot;&gt;Uzbl&lt;/a&gt; someday. I use &lt;a href=&quot;http://openbox.org/wiki&quot;&gt;Openbox&lt;/a&gt; as my window manager. Sakura as my terminal, simply because it’s lightweight, simple to setup and it does its job.&lt;/p&gt;

&lt;p&gt;I have Openbox &lt;a href=&quot;http://github.com/Sirupsen/dotfiles/blob/master/.config/openbox/rc.xml&quot;&gt;configured to act like Vim&lt;/a&gt;, and for Chromium I use &lt;a href=&quot;https://chrome.google.com/extensions/detail/dbepggeogbaibhgnhhndojpepiihcmeb&quot;&gt;Vimium&lt;/a&gt; to achieve the same Vim behavior. In theory I &lt;em&gt;never&lt;/em&gt; have to touch my mouse.&lt;/p&gt;

&lt;h3 id=&quot;shell&quot;&gt;Shell&lt;/h3&gt;

&lt;p&gt;As for my shell I just use &lt;code&gt;bash&lt;/code&gt;. I know the cool kids use &lt;code&gt;zsh&lt;/code&gt;, but I simply haven’t bothered to set it up, and I’m really quite happy with &lt;code&gt;bash&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;My bash configuration is pretty simple. It just defines some default values, source a few things, and add to my &lt;code&gt;$PATH&lt;/code&gt;. It also sets my &lt;code&gt;PS1&lt;/code&gt; which consists of only the current directory. I figured that I &lt;em&gt;already know&lt;/em&gt; my username, and hostname. Furthermore I really don’t need to know the entire absolute path of the current directory.&lt;/p&gt;

&lt;h2 id=&quot;editor-vim&quot;&gt;Editor: Vim&lt;/h2&gt;

&lt;p&gt;I’ve been through many editors. Many. Believe me. A little less than a year ago, a friend recommended me Vim. And I started digging into it. In the beginning, it was hard. But he promised me it’d be worth it. So I sticked to it. In the start, I felt less productive in Vim, because it was somewhat hard to learn. After a few days in it however, I began taking advantage of the endless sets of commands, this all resulted in a &lt;em&gt;more&lt;/em&gt; productive me. I now love Vim, and nowadays I almost do all of my text-processing in it: I take notes in Vim, I’m writing this very blog post in Vim, and I make kickass code in Vim.&lt;/p&gt;

&lt;p&gt;My Vim setup really is nothing special. I use a few plugins, and I have a small configuration file which is just parts stolen and compiled from others. I can’t remember who I stole what from, though. So they are not credited. I use Monaco as my Vim (and terminal) font, I simply like this font a lot. &lt;a href=&quot;http://imgur.com/IdNuY.png&quot;&gt;Screenshot&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;syncing-dropbox&quot;&gt;Syncing: Dropbox&lt;/h2&gt;

&lt;p&gt;As I have multiple computers, I sync &lt;em&gt;everything&lt;/em&gt; with Dropbox. This also has the benefit of being (additional, I have everything under &lt;code&gt;git&lt;/code&gt;, too) backup. My Dropbox holds mostly configuration files and code. The rest is in the cloud. With everything in my Dropbox, I make symbolic links from the Dropbox.&lt;/p&gt;

&lt;h3 id=&quot;configuration-between-multiple-computers&quot;&gt;Configuration between multiple computers&lt;/h3&gt;

&lt;p&gt;As I have multiple computers, I want &lt;a href=&quot;http://github.com/Sirupsen/dotfiles&quot;&gt;my configuration files&lt;/a&gt; (&lt;em&gt;dotfiles&lt;/em&gt;) to change on other computers as soon as I have changed it somewhere else. In the beginning I had an ugly Rake task to do all this symbolic linking, but later I discovered &lt;a href=&quot;http://github.com/technicalpickles/homesick&quot;&gt;Homesick&lt;/a&gt;. &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Homesick is sorta like rip, but for dotfiles. It uses git to clone a repository containing dotfiles, and saves them in &lt;code&gt;~/.homesick&lt;/code&gt;. It then allows you to symlink all the dotfiles into place with a single command.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you clone a &lt;code&gt;castle&lt;/code&gt;, as they are called in Homesick, it puts the castle in &lt;code&gt;~/.homesick/repos/&amp;lt;repo&amp;gt;&lt;/code&gt;, for instance:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;homesick clone Sirupsen/dotfiles &lt;span class=&quot;c&quot;&gt;# goes to ~/homesick/repos/Sirupsen/dotfiles&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Instead of updating the dotfiles with Git via pulling, however, I wanted it to go through Dropbox, so changes are reflected on my other computers instantly. Later, I can commit these changes:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ln -s Dropbox/dotfiles ~/.homesick/repos/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now I can symlink everything easily:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;homesick symlink dotfiles
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;using-dual-screen-for-coding&quot;&gt;Using dual screen for coding&lt;/h2&gt;

&lt;p&gt;When I work, I usually work on two monitors. A 19”, and a 24”.&lt;/p&gt;

&lt;p&gt;On my 19” I have Pidgin running. This makes me able to talk to colleagues, or friends while working on my other monitor. I might also shring my windows here, and have another terminal open with tests.&lt;/p&gt;

&lt;p&gt;On my 24” I have my browser running in the right side, taking up about 50% of horizontal space. When i am coding, this is great for documentation and general googling, githubing and ticket managing while coding. I have experimented with fullscreen Vim, however I just don’t need more than these 80 columns horizontally, so this setup works great. More vertical space is always nice, I’ve heard great things about having a screen that can be turned around to a portrait view for coding. I usually have my terminal running beneath my Vim window, it’s super easy to switch between them with my Openbox Vim configuration.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Get started right with RVM</title>
   <link href="http://sirupsen.github.com/get-started-right-with-rvm"/>
   <updated>2010-09-07T00:00:00+08:00</updated>
   <id>http:/sirupsen.github.com/get-started-right-with-rvm</id>
   <content type="html">&lt;p&gt;I’ve always run Ruby with &lt;a href=&quot;http://rvm.beginrescueend.com/&quot;&gt;RVM&lt;/a&gt;. After
&lt;a href=&quot;http://twitter.com/chopmo&quot;&gt;@chopmo’s&lt;/a&gt; talk at &lt;a href=&quot;http://aarhusrb.dk&quot;&gt;Aarhusrb&lt;/a&gt; on
RVM, I realized how much more I could get out of RVM. I found I basically use
RVM as just a way to switch between Ruby versions and implementations, rather
than leveraging the power of gemsets, installing gems on a user basis and the
&lt;code&gt;.rvmrc&lt;/code&gt; file. This post is a compiled version of what I learned from the
previously mentioned talk and digging into the &lt;a href=&quot;http://rvm.beginrescueend.com/&quot;&gt;RVM documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;installing-rvm&quot;&gt;Installing RVM&lt;/h2&gt;

&lt;p&gt;If you haven’t already, install RVM at the user level:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bash &amp;lt; &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; curl http://rvm.beginrescueend.com/releases/rvm-install-head &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;With &amp;gt; 1 RVM users on the system, you may want to look into a system-wide
&lt;a href=&quot;http://rvm.beginrescueend.com/deployment/system-wide/&quot;&gt;system-wide installation&lt;/a&gt;.
Otherwise, it is recommended to stay with the default user-wide installation.&lt;/p&gt;

&lt;p&gt;To inject RVM into your environment &lt;code&gt;.bashrc&lt;/code&gt;, &lt;code&gt;.bash_profile&lt;/code&gt;, add the bit of
bash it mentions at the end of the installation:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;[[ -s &amp;quot;$HOME/.rvm/scripts/rvm&amp;quot; ]] &amp;amp;&amp;amp; source &amp;quot;$HOME/.rvm/scripts/rvm&amp;quot;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; .bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;fixing-slow-gem-installations&quot;&gt;Fixing slow gem installations&lt;/h3&gt;

&lt;p&gt;Installing Ruby gems is by default a slow affair due to &lt;code&gt;ri&lt;/code&gt; and &lt;code&gt;rdoc&lt;/code&gt;
documentation generation. Most likely you do not use this, and can disable it in
return for vastly improved installation speeds:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdoc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Verify whether the &lt;code&gt;rvm&lt;/code&gt; command works and check system specific notes:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm notes
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;uninstalling-all-gems-in-system-ruby-optional&quot;&gt;Uninstalling all gems in system Ruby (Optional)&lt;/h2&gt;

&lt;p&gt;This step can safely be skipped, I simply performed it to clean my system.&lt;/p&gt;

&lt;p&gt;With RVM installed, you can simply empty your current, global gemset (this’ll
make more sense in a minute):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm gemset empty
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can easily take a backup of all your installed Gem’s and their versions with
RVM:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm gemset &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;backup.gems
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you want to restore, it’s simply a matter of running:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm gemset import backup.gems
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’ll mention why &lt;code&gt;rvm gemset {import,export}&lt;/code&gt; is as nifty as it is further down.&lt;/p&gt;

&lt;h2 id=&quot;installing-rubies&quot;&gt;Installing Rubies&lt;/h2&gt;

&lt;p&gt;In RVM jargon Rubies are essentially Ruby versions, let’s go ahead and install
&lt;code&gt;Ruby MRI 1.9.3&lt;/code&gt; (this is the default interpreter originally developed by Matz)
first, and set that as our default interpreter. Afterwards, we’ll install &lt;code&gt;Ruby
1.8.7&lt;/code&gt;, use RVM to easily switch between these two Rubies.&lt;/p&gt;

&lt;p&gt;Installing &lt;code&gt;1.9.3&lt;/code&gt; is the trivial matter of issuing:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm install 1.9.3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This can take a while, since it compiles from source. When this process has
finished, switch to it with the following command to verify it works:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm 1.9.3 &lt;span class=&quot;c&quot;&gt;# shortcut for rvm use 1.9.3&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby -v
ruby 1.9.3p194 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2012-04-20 revision 35410&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;x86_64-darwin11.4.0&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;By default, your default interpreter is the system Ruby provided by your
operating system, for instance in OS X this is &lt;code&gt;MRI Ruby 1.8.7&lt;/code&gt;. You want to set
this to a Ruby maintained by RVM to make use of all RVM’s features:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm --default 1.9.3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Restart your shell, and run &lt;code&gt;ruby -v&lt;/code&gt; to verify it is not the default Ruby.
Let’s install &lt;code&gt;1.8.7&lt;/code&gt; along with &lt;code&gt;1.9.3&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm install 1.8.7
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can then switch to it just as before:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm 1.8.7
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You are now up and running with two Rubies! With RVM, you can also install
different interpreters such as Rubinius, JRuby or Maglev following the
same installation procedure as above.&lt;/p&gt;

&lt;h2 id=&quot;gemsets&quot;&gt;Gemsets&lt;/h2&gt;

&lt;h3 id=&quot;what&quot;&gt;What?&lt;/h3&gt;

&lt;p&gt;The shortest explanation, is found within the name. Gem-sets.&lt;br /&gt;
RVM’s documentation puts it like this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;RVM gives you compartmentalized independent ruby setups. This means that ruby,
gems and irb are all separate and self-contained from system and from each
other.   You may even have separate named gemsets.  Let’s say, for example,
that you are testing two versions of a gem with ruby 1.9.3-head. You can
install one to the default 1.9.3-head and create a named gemset for the other
version and switch between them easily.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ideally you have a Gemset for each project that you are working on. This keeps
your system clean, and eliminates “Gem clutter” and version mismatches. Also
running &lt;code&gt;bundle install&lt;/code&gt; will use the project defined gemset to also store the
gems.&lt;/p&gt;

&lt;h3 id=&quot;contemporary-note-on-gem-versions-and-gemsets&quot;&gt;Contemporary note on gem versions and gemsets&lt;/h3&gt;

&lt;p&gt;When I wrote this article, &lt;code&gt;bundler&lt;/code&gt; wasn’t commonly found in Ruby projects as
it is now. &lt;code&gt;bundler&lt;/code&gt; now solves the problems gemsets solved, by ensuring the
correct versions of the gems for the specific projects are loaded into the
environment by running scripts in your project with &lt;code&gt;bundler exec&lt;/code&gt; rather than
&lt;code&gt;ruby&lt;/code&gt;. &lt;code&gt;bundler&lt;/code&gt; projects thus make simpler approaches to the problem RVM solves
possible, the most popular alternative nowadays is
&lt;a href=&quot;https://github.com/sstephenson/rbenv&quot;&gt;rbenv&lt;/a&gt; which I use on most of my systems
these days.&lt;/p&gt;

&lt;h3 id=&quot;creating-and-using-a-gemset&quot;&gt;Creating and using a gemset&lt;/h3&gt;

&lt;p&gt;Let’s go ahead and create a gemset:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm gemset create foo &lt;span class=&quot;c&quot;&gt;# Create gemset &amp;#39;foo&amp;#39;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt; gemset created &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/home/sirup/.rvm/gems/ruby-1.9.3-p0@foo&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm 1.9.3@foo &lt;span class=&quot;c&quot;&gt;# Switch to Ruby 1.9.3 with gemset &amp;#39;foo&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem list &lt;span class=&quot;c&quot;&gt;# Lists installed gems&lt;/span&gt;
*** LOCAL GEMS ***
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We’ll go ahead and install a few gems in our new gemset, note that we are not
using &lt;code&gt;sudo&lt;/code&gt; to install gems, as the gemsets are stored in your user directory,
and thus does not require administrator privileges: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install rails
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem list
gem list
*** LOCAL GEMS ***

abstract &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
actionmailer &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
actionpack &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
activemodel &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;..&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Switching back to our default, global gemset, will reveal that &lt;code&gt;rails&lt;/code&gt; and its
associated gems above, was indeed installed in an isolated gemset.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm 1.9.3 &lt;span class=&quot;c&quot;&gt;# explicit: rvm 1.9.3@global&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem list
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As expected, &lt;code&gt;gem list&lt;/code&gt; returns an empty list since there are no gems in the
global gemset which we cleared earlier.&lt;/p&gt;

&lt;h3 id=&quot;dumping-and-loading-gemsets&quot;&gt;Dumping and loading gemsets&lt;/h3&gt;

&lt;p&gt;Exporting a gemset is easy with RVM as previously mentioned:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm 1.9.3@foo
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm gemset &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;rails.gems
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat rails.gems
abstract -v1.0.0
actionmailer -v3.0.0
actionpack -v3.0.0
activemodel -v3.0.0
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;..&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can then toss &lt;code&gt;rails.gems&lt;/code&gt; to someone else, who’d be able to import that
gemset as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm use 1.9.3@rails --create &lt;span class=&quot;c&quot;&gt;# shortcut to create, then switch to it&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm gemset import rails.gems
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Installing all the gems from &lt;code&gt;rails.gems&lt;/code&gt; with the right versions. This works
great in teams, because of all the version conflicts that otherwise happen if
you just install the newest versions of everything.&lt;/p&gt;

&lt;h3 id=&quot;contemporary-note-on-exporting-and-importing-gemsets&quot;&gt;Contemporary note on exporting and importing gemsets&lt;/h3&gt;

&lt;p&gt;Nowadays we have &lt;code&gt;bundler&lt;/code&gt; which also solves this problem, which used to be a
massive pain. Nonetheless, it still has a wide array of usages today.&lt;/p&gt;

&lt;h3 id=&quot;the-global-and-default-gemset&quot;&gt;The global and default gemset&lt;/h3&gt;

&lt;p&gt;Two interesting gemsets are the &lt;code&gt;global&lt;/code&gt; (&lt;code&gt;~/.rvm/gemsets/global.gems&lt;/code&gt;) and
&lt;code&gt;default&lt;/code&gt; (&lt;code&gt;~/.rvm/gemsets/default.gems&lt;/code&gt;) gemsets.  &lt;/p&gt;

&lt;p&gt;Gems in the &lt;code&gt;global gemset&lt;/code&gt;, will be added to the global gemset in &lt;em&gt;every&lt;/em&gt; new
Ruby you install. &lt;code&gt;rake&lt;/code&gt;, &lt;code&gt;rdoc&lt;/code&gt; and &lt;code&gt;bundler&lt;/code&gt; are good examples of handy global
gems. The gems in the &lt;code&gt;default gemset&lt;/code&gt; are the gems included in every newly
created gemset.&lt;/p&gt;

&lt;h2 id=&quot;rvmrc&quot;&gt;rvmrc&lt;/h2&gt;

&lt;p&gt;There are three different kinds of &lt;code&gt;rvmrc&lt;/code&gt; files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;System &lt;code&gt;/etc/rvmrc&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;System wide configuration&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;User &lt;code&gt;~/.rvmrc&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;User wide configuration&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Project &lt;code&gt;.rvmrc&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Project wide configuration&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The most interesting one is the project &lt;code&gt;.rvmrc&lt;/code&gt;. Every time you &lt;code&gt;cd&lt;/code&gt;, RVM looks
for a file called &lt;code&gt;.rvmrc&lt;/code&gt;. If it finds it, it executes it. The following
&lt;code&gt;.rvmrc&lt;/code&gt; file would switch to &lt;code&gt;Ruby MRI 1.8.7&lt;/code&gt; and gemset &lt;code&gt;project&lt;/code&gt; every time
we change into that directory:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;rvm 1.8.7@project&amp;quot;&lt;/span&gt; &amp;gt; ~/projects/ruby-1.8.7-project/.rvmrc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I received &lt;a href=&quot;http://twitter.com/wayneeseguin/status/24387445101&quot;&gt;a tip&lt;/a&gt; from
RVM’s creator &lt;a href=&quot;http://twitter.com/wayneeseguin&quot;&gt;@wayneeseguin&lt;/a&gt;, that we can be
even more sneaky about this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm --create --rvmrc 1.8.7@project
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will create the gemset, and the &lt;code&gt;.rvmrc&lt;/code&gt; file for the project all in one
command!&lt;/p&gt;

&lt;p&gt;To demonstrate what we just did:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;~/projects &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby -v
ruby 1.9.3p194 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2012-04-20 revision 35410&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;x86_64-darwin11.4.0&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
~/projects &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ruby-1.8.7-project/
~/projects/ruby-1.8.7-project &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby -v
ruby 1.8.7 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2012-02-08 patchlevel 358&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;universal-darwin12.0&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
~/projects/ruby-1.8.7-project &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm gemset name
project
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;My favorite configuration option is &lt;code&gt;rvm_gemset_create_on_use_flag=1&lt;/code&gt;, having
this line in &lt;code&gt;/etc/rvmrc&lt;/code&gt; or &lt;code&gt;~/.rvmrc&lt;/code&gt;, gemsets will be automatically created
if they do not exist when you switch to them:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm gemset list
gemsets &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;ruby-1.9.3-p194 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;found in /home/sirup/.rvm/gems/ruby-1.9.3-p0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
gemsets &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;ruby-1.8.7-p358 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;found in /home/sirup/.rvm/gems/ruby-1.9.3-p358&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

foo
global
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm gemset use foobar
Now using gemset &lt;span class=&quot;s1&quot;&gt;&amp;#39;foobar&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://twitter.com/wayneeseguin&quot;&gt;@wayneeseguin&lt;/a&gt; sent in &lt;a href=&quot;http://twitter.com/wayneeseguin/status/24387379953&quot;&gt;another tip&lt;/a&gt; about how to add &lt;a href=&quot;http://rvm.beginrescueend.com/workflow/completion/&quot;&gt;&lt;code&gt;bash&lt;/code&gt; and &lt;code&gt;zsh&lt;/code&gt; completion&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;You can read more about &lt;code&gt;rvmrc&lt;/code&gt; in &lt;a href=&quot;http://rvm.beginrescueend.com/workflow/rvmrc/&quot;&gt;RVM’s documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This is all briefly describing what can be found in &lt;a href=&quot;http://rvm.beginrescueend.com/&quot;&gt;RVM’s (fantastic)
documentation&lt;/a&gt;. For basic use, this article
should cover the main topics, however, RVM can still do a whole lot more than I
addressed here. The goal of this post was simply to get you started well, and
right, with RVM.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://news.ycombinator.com/item?id=1686435&quot;&gt;Discuss this on Hacker News&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The switch to Github Pages</title>
   <link href="http://sirupsen.github.com/the-switch-to-github-pages"/>
   <updated>2010-07-23T00:00:00+08:00</updated>
   <id>http:/sirupsen.github.com/the-switch-to-github-pages</id>
   <content type="html">&lt;div class=&quot;intro&quot;&gt;I ditched my VPS to migrate my blog to Github
Pages. A simple blogging platform for hackers.&lt;/div&gt;

&lt;p&gt;I hosted my previous Wordpress blog on my dad’s server. Limiting me in terms
of technological mobility. The lack of free deployment methods kept me from
using languages other than PHP.&lt;/p&gt;

&lt;p&gt;I decided to rent a VPS. I looked at &lt;a href=&quot;http://www.lowendbox.com/&quot;&gt;low end box&lt;/a&gt; for a light option,
since a personal blog like this requires minimal power. Although I wanted to
retain enough power to stand a Slashdot as when I published &lt;a href=&quot;/what-I-wish-a-ruby-programmer-had-told-me-one-year-ago/&quot;&gt;What I wish a Ruby
programmer had told me one year ago&lt;/a&gt;, requiring juice which isn’t needed
the majority of the time. Adding a caching layer to avoid the dynamic web server
layer seemed like a redundant move, which it turned out to be.&lt;/p&gt;

&lt;p&gt;Pretty soon I had to switch VPS host due to latency issues, at the thought of
migrating my blog once again, the thought of hosting it independently became
intrusive. My blog was mostly static anyhow: Wrote &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; blog
posts in Vim, no comment system or other dynamic interaction.&lt;/p&gt;

&lt;p&gt;I looked into &lt;a href=&quot;http://pages.github.com&quot;&gt;Github Pages&lt;/a&gt;, which runs &lt;a href=&quot;http://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt; allowing you to
host a sophisticated static blog, with support for the mandatory hacker features
such as code highlighting and clever handling of the static blog posts. It’s
super easy to set up. Deployment is performed just by pushing to a Github
repository with the name “&lt;username&gt;.github.com&quot;, i.e. I push to the repo at
[Sirupsen/sirupsen.github.com][source]. Here's a little guide to [migrate 
from other blogging engines][migrate].&lt;/username&gt;&lt;/p&gt;

&lt;p&gt;I’ve since cancelled my VPS. I no longer have to worry about a server or uptime.
You’re welcome to &lt;a href=&quot;https://github.com/Sirupsen/sirupsen.github.com&quot;&gt;fork my blog&lt;/a&gt; to create your own.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>A simple Imgur Bash screenshot utility</title>
   <link href="http://sirupsen.github.com/a-simple-imgur-bash-screenshot-utility"/>
   <updated>2010-05-10T00:00:00+08:00</updated>
   <id>http:/sirupsen.github.com/a-simple-imgur-bash-screenshot-utility</id>
   <content type="html">&lt;p&gt;I use screenshots a lot, every day. Mostly when I do instant messaging, they can usually help explain something much quicker than anything else. It’s rare that I edit the screenshot, and in these rare occasions, it doesn’t bother me all that much having to fire up &lt;a href=&quot;http://pinta-project.com/&quot;&gt;Pinta&lt;/a&gt; or &lt;a href=&quot;http://www.gimp.org/&quot;&gt;Gimp&lt;/a&gt;–to make these small changes.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;shoot&lt;/code&gt;’s dependencies are: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;curl&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;grep&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;scrot&lt;/code&gt; &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;xclip&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;libnotify&lt;/code&gt; (&lt;em&gt;optional&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You probably have those already, if not, install them via your package manager.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;curl http://sirupsen.com/static/misc/shoot &amp;gt; ~/bin/shoot &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; chmod 755 ~/bin/shoot
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Assuming &lt;code&gt;~/bin&lt;/code&gt; is in your &lt;code&gt;$PATH&lt;/code&gt;, you’re ready to &lt;code&gt;shoot&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;shoot
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;xclip -selection c -o
http://imgur.com/Z8prG.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I recommend that you bind the script to a key, so you can easily activate it.&lt;/p&gt;

&lt;h2 id=&quot;coming-up-with-the-script&quot;&gt;Coming up with the script&lt;/h2&gt;

&lt;p&gt;The functionality needed, came down to this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Select region and take screenshot of this region&lt;/li&gt;
  &lt;li&gt;Upload screenshot to &lt;a href=&quot;http://imgur.com&quot;&gt;Imgur&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Put direct link to screenshot into the clipboard&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Taking a screenshot of a specified region is quite easy with &lt;code&gt;scrot&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;scrot -s
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then using &lt;code&gt;curl&lt;/code&gt; to upload the picture, via the Imgur API:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;curl -s -F &lt;span class=&quot;s2&quot;&gt;&amp;quot;image=@$1&amp;quot;&lt;/span&gt; -F &lt;span class=&quot;s2&quot;&gt;&amp;quot;key=api-key&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
http://imgur.com/api/upload.xml 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This returns some XML containing, among other things, the direct URL to the uploaded screenshot, which we extract from the returned XML with a simple regex:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;grep -E -o &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;original_image&amp;gt;(.)*&amp;lt;/original_image&amp;gt;&amp;quot;&lt;/span&gt; | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
grep -E -o &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://i.imgur.com/[^&amp;lt;]*&amp;quot;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we have the direct link, and then it’s simply a matter of putting this all into the clipboard with &lt;code&gt;xclip&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;xclip -selection c 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now this is optional, but quite handy. It uses &lt;code&gt;libnotify&lt;/code&gt; to notify you when the image is uploaded, and ready to be pasted:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;notify-send &lt;span class=&quot;s2&quot;&gt;&amp;quot;Clipboard ready!&amp;quot;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-script&quot;&gt;The script&lt;/h2&gt;

&lt;p&gt;And I compiled all this into this simple script (I’m aware that this can be a one-liner and everything but this just seems more readable and &lt;em&gt;works&lt;/em&gt;. If you have a better solution, be sure to contact me!):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;uploadImage &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  curl -s -F &lt;span class=&quot;s2&quot;&gt;&amp;quot;image=@$1&amp;quot;&lt;/span&gt; -F &lt;span class=&quot;s2&quot;&gt;&amp;quot;key=486690f872c678126a2c09a9e196ce1b&amp;quot;&lt;/span&gt; http://imgur.com/api/upload.xml | grep -E -o &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;original_image&amp;gt;(.)*&amp;lt;/original_image&amp;gt;&amp;quot;&lt;/span&gt; | grep -E -o &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://i.imgur.com/[^&amp;lt;]*&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

scrot -s &lt;span class=&quot;s2&quot;&gt;&amp;quot;shot.png&amp;quot;&lt;/span&gt; 
uploadImage &lt;span class=&quot;s2&quot;&gt;&amp;quot;shot.png&amp;quot;&lt;/span&gt; | xclip -selection c
rm &lt;span class=&quot;s2&quot;&gt;&amp;quot;shot.png&amp;quot;&lt;/span&gt;
notify-send &lt;span class=&quot;s2&quot;&gt;&amp;quot;Done&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s it. Hopefully you’ll enjoy it as much as I do.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>What I wish a Ruby programmer had told me one year ago</title>
   <link href="http://sirupsen.github.com/what-I-wish-a-ruby-programmer-had-told-me-one-year-ago"/>
   <updated>2010-04-28T00:00:00+08:00</updated>
   <id>http:/sirupsen.github.com/what-I-wish-a-ruby-programmer-had-told-me-one-year-ago</id>
   <content type="html">&lt;strong&gt;Warning:&lt;/strong&gt; Biased content follows.

&lt;p&gt;Scroll down if you just want to skip to my wise words.&lt;/p&gt;

&lt;p&gt;One year ago, I started coding for real again. I dumped wasting times on stupid games and so on. I like building websites, so I started by going back to the roots. HTML &amp;amp; CSS which I had coded when I was about 10, and it didn't take me long before I had moved from tables to div tags and all. I learned myself to hand-code it, and not rely on software like Dreamweaver. Resulting in better, more compact and valid HTML. I had played around with PHP when I was about 11, so I decided to build some stuff in it again.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I should never have done that, I have realized. I used about 4 months in PHP, picking up  bad habits. At some point, I found myself reaching points where I saw PHP solutions plain stupid. I didn't have experience with any other languages, but I knew there had to be better ways. So I decided to dive into Python, and later look at the Django web framework. So I did.&lt;/p&gt;

&lt;p&gt;After a few days playing around with Python, I felt okay with it. I didn't love Python, but it was fairly simple, and from the simple Django examples I felt confident I was ready to proceed and expand my literacy in Python via Django. After following the basic tutorials, I felt Django was already superior to PHP.&lt;/p&gt;

&lt;p&gt;I had heard about this evil language called Ruby and some framework called Rails, I had not considered it though because of three (stupid) reasons:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Highest ratio of smug fanboys&lt;/li&gt;
	&lt;li&gt;End-statements&lt;/li&gt;
	&lt;li&gt;Ruby had become popular due to Rails, not the other way around as it is with Django&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So a Saturday night, I turned off the light, locked the door and sealed the windows. It was time to check out this Japanese creation. The fanboys all over the web seemed to recommend this fabulous book called &lt;a href=&quot;http://en.wikipedia.org/wiki/Why's_(poignant)_Guide_to_Ruby&quot;&gt;Why's (poignant) guide to Ruby&lt;/a&gt;. I installed Ruby, and dove into the book.&lt;/p&gt;

&lt;p&gt;A few hours later, I had forgotten everything about Python. Stupid language. Ruby was where it was at, and I instantly started recommending it to all my code-buddies. It's such an awesome language, why not spread the joy? They said I was a fanboy, and told me to gtfo. And I quickly realized what had happened.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Ruby is evil&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ruby is indeed evil. So evil. Extremely evil. But why so evil? Because it's so &lt;em&gt;beautiful&lt;/em&gt;. The syntax is so elegant, everything are objects. Everything makes sense. The Ruby-way of doing things is so sexy.&lt;/p&gt;

&lt;p&gt;I quickly headed over to #ruby and asked them what I should do to practise my all-so-awesome Ruby skills, and some guy recommended me coding a todo-app. It seemed it was the new semi-advanced-but-no-so-advanced hello world. So I did, and here's the extremely awesome output (be prepared, it's extremely bad code and you should &lt;strong&gt;NEVER&lt;/strong&gt; do something like this in Ruby):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Todo&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@argv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TypeError&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NoMethodError&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Command &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; not found.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Lists help information&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;help&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;help&lt;/span&gt;
&lt;span class=&quot;sh&quot;&gt;Commands for Todo.rb:&lt;/span&gt;
&lt;span class=&quot;sh&quot;&gt;   add [task name] - Add a new task&lt;/span&gt;
&lt;span class=&quot;sh&quot;&gt;   list - Lists all tasks&lt;/span&gt;
&lt;span class=&quot;sh&quot;&gt;   done [task id] - Complete a task&lt;/span&gt;
&lt;span class=&quot;sh&quot;&gt;   help - Prints out this information&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;    help&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Add task&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Lacking argument [name]&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Append task to file&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;todo.td&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;todo.td&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;todo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# List all tasks&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Read content&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;todo.td&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;No tasks&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Show it with ids&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each_line&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;#&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; - &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Finished a task&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;done&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Lacking argument [id]&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Put tasks into an array&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;todos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;todo.td&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;todos&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;No tasks&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Completed task: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Delete task from array and make string&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Update file&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;todo.td&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;todo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Todo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Proudly I showed it to the guy who recommended me to create a Todo-app. &quot;Look at this! Ruby is so narwhal!&quot; It took him a while to reply. It would've taken me a while to reply too if somebody showed me such code. It looks like some Bash code, in an object oriented language. Woah.  So this guy, he was very helpful and told me he'd make a skeleton for the app. and make me fill in the holes/methods, it was something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TodoList&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# read the file, create a list, create items, add them&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# write the file, only write the undone items&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TodoItem&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# provide reader and setter for name and state&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# store name&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# set state to undone&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ---&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# the library will be used like this:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# list = TodoList.load(&amp;quot;todo.td&amp;quot;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# list[0].done = true&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# list.add TodoItem.new(&amp;quot;another cool item&amp;quot;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# list.write(&amp;quot;todo.td&amp;quot;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;So I did. It took a while to adapt from the bad PHP-style, to the Ruby-style. I ended up with &lt;a href=&quot;https://gist.github.com/6656de5cc00df7802c5e&quot;&gt;this&lt;/a&gt;. And then I added &lt;a href=&quot;https://gist.github.com/94bc0e64442de04deb0b&quot;&gt;an interface.&lt;/a&gt; And then &lt;a href=&quot;http://gist.github.com/255203&quot;&gt;meta-programming.&lt;/a&gt; And then I was in love.&lt;/p&gt;

&lt;p&gt;So the title of this post is &quot;What I wish a Ruby programmer had told me one year ago..&quot;, and that's quite an intro. Since what I wish a Ruby programmer had told me is not much, but could've saved me 4 months in company with PHP.&lt;/p&gt;

&lt;p&gt;Here's what I'll tell anyone asking me how they should get into programming:&lt;/p&gt;

&lt;p&gt;&quot;First, learn Ruby (buy a book). Play around, create a Todo-app. Create simple programs to handle system tasks for you. But always remember to use classes, and separate the interface from the functionality. In the end this will be pain, you'll always think about making it appear Rubyish, but at some point - it becomes natural. And when it has become natural, you go &lt;a href=&quot;http://blog.sirupsen.dk/guides/create-your-first-ruby-gem-and-release-it-to-gemcutter/&quot;&gt;create a Gem&lt;/a&gt;. If you create a big Gem, with much functionality - split it into more Gems, and make it require those. Or use other peoples Gems. If you want to move on with developing web applications, start out simple. Check out a lightweight framework like &lt;a href=&quot;http://www.sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt;, it's cool and very fun to work with. Move on to Rails if you want, it takes longer to learn, but it is much faster to develop in.&quot;&lt;/p&gt;

&lt;p&gt;And perhaps point them towards Linux, if they are up for it:&lt;/p&gt;

&lt;p&gt;&quot;&lt;strong&gt;I&lt;/strong&gt; do not believe Windows is the best development platform in the world for Ruby. I recommend you to try out Linux (or OS X, if you've got the money for it). Start with a simple distribution, like &lt;a href=&quot;http://www.ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt;. And then I recommend something like &lt;a href=&quot;http://www.archlinux.org/&quot;&gt;Arch Linux&lt;/a&gt; whenever you feel like you are ready for something more advanced, assuming you want to learn more about how Linux works!&quot;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I'm biased. And I know it. Ruby is not a language for everyone, and PHP is not a bad language - it's just not for me. Neither is Python a bad language - it's just not for me. Windows is not a bad operating system - It's just not for me. I advise you to try different languages/operating systems, and eventually find the one you feel at home in.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Create your first Ruby Gem and release it to Gemcutter</title>
   <link href="http://sirupsen.github.com/create-your-first-ruby-gem-and-release-it-to-gemcutter"/>
   <updated>2010-04-20T00:00:00+08:00</updated>
   <id>http:/sirupsen.github.com/create-your-first-ruby-gem-and-release-it-to-gemcutter</id>
   <content type="html">&lt;p&gt;A few days ago I was set off to create my first RubyGem. There are many resources on how to do this, but it took me a good while to gather all the information I figured I’d need for my application, so I’ve decided to gather my bit of knowledge in this article.&lt;/p&gt;

&lt;p&gt;This article’s goal is kick start the creation of your first Gem. To make this experience more enjoyable, I’ve chosen to use a gem called &lt;a href=&quot;http://github.com/technicalpickles/jeweler&quot;&gt;Jeweler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I am by no means a “ruby-pro”. I have only created a single Gem, but I thought this article could be helpful to a lot of people, and thus I wrote it. If you have any corrections, questions, or suggestions please either email me at sirup@sirupsen.dk or comment below.&lt;/p&gt;

&lt;!--more--&gt;
&lt;h2&gt;Preparing&lt;/h2&gt;
&lt;p&gt;.. for world domination!&lt;/p&gt;

&lt;p&gt;I assume you already know a bit of &lt;a href=&quot;http://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt;, that you know what &lt;a href=&quot;http://rubygems.org/&quot;&gt;RubyGems&lt;/a&gt; is, and you have already downloaded a few gems, and used some of them in your work. Now your are simply seeking to create your own Gems. You are indeed in for a fun time, coding gems is lots of fun!&lt;/p&gt;

&lt;p&gt;Before we can begin, install the &lt;a href=&quot;http://github.com/technicalpickles/jeweler&quot;&gt;Jeweler&lt;/a&gt; gem via RubyGems:&lt;/p&gt;
&lt;pre&gt;$ gem install jeweler&lt;/pre&gt;

&lt;p&gt;Jeweler is a tool to create the basic skeleton for your Gem, as well as managing the gem.&lt;/p&gt;

&lt;h2&gt;Creating your gem&lt;/h2&gt;
&lt;p&gt;.. with your mighty companion &lt;strong&gt;Jeweler&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once Jeweler is installed, you want to create your Gem skeleton. I'm going to create a simple Hello World gem for the sake of example, and later on explain a bit about how you could manage your own Gem (at the very least my 2 cents about how a gem should be done).&lt;/p&gt;
&lt;pre&gt;$ jeweler helloworld # Should be all small letters&lt;/pre&gt;
&lt;pre&gt;	create	.gitignore
	create	Rakefile
	create	LICENSE
	create	README.rdoc
	create	.document
	create	lib
	create	lib/helloworld.rb
	create	test
	create	test/helper.rb
	create	test/test_helloworld.rb
Jeweler has prepared your gem in helloworld&lt;/pre&gt;

&lt;p&gt;Now your gem skeleton is ready! Let's get in there and check it out.&lt;/p&gt;

&lt;pre&gt;$ cd helloworld
$ ls
&lt;span style=&quot;color: #008000;&quot;&gt;&lt;strong&gt;lib/&lt;/strong&gt;&lt;/span&gt;  LICENSE  Rakefile  README.rdoc  &lt;span style=&quot;color: #008000;&quot;&gt;&lt;strong&gt;test/&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;This structure might look familiar to you. (Assuming you are like me and have already stalked a few Gems' sources over at &lt;a href=&quot;https://github.com/&quot;&gt;Github&lt;/a&gt;) Now I'll attempt to explain what these files and folders are.&lt;/p&gt;

&lt;h3&gt;lib/&lt;/h3&gt;

&lt;p&gt;This is where your application lives, this is where you'll probably spend the most of your time working on your gem. It is common to have a folder inside this folder called whatever your gem is called (in this example, that would be &lt;strong&gt;helloworld&lt;/strong&gt;), in which your app. is split into a few files, for organizations sake. And then have&lt;strong&gt; lib/&amp;lt;gem name&amp;gt;.rb &lt;/strong&gt;require these files (as &lt;strong&gt;/lib/&amp;lt;gem name&amp;gt;.rb &lt;/strong&gt;is what is required by Ruby whenever somebody requires your gem in their own project).&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;My 2 cents on organizing stuff in here &lt;em&gt;(skippable)&lt;/em&gt;&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;As said, I am in no way an expert. But this is how I would do it.&lt;/p&gt;

&lt;p&gt;My first gem is a gem for a file storage service (&lt;a href=&quot;http://anyhub.net/&quot;&gt;Anyhub&lt;/a&gt;) which should do two things:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Create a library for easy Ruby interaction with Anyhub&lt;/li&gt;
	&lt;li&gt;Contain a small CLI for Anyhub based on it's own library&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I figured I would have a module, containing a few classes:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Upload (for uploading files to Anyhub)&lt;/li&gt;
	&lt;li&gt;Account (to manage ones Anyhub account)&lt;/li&gt;
	&lt;li&gt;Runner (to manage the CLI)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Upload class would simply be able to use the account class, to check if an account was configured in a config file (f.e. &lt;em&gt;account_config.yaml&lt;/em&gt;). If a config file was present, it would upload the file(s) specified in arguments to the script. Otherwise, it would return an error. Runner (the CLI) would respond to this error, allowing the user to type in his details so they could be used for the ongoing upload, as well as any following uploads (by saving the details to &lt;em&gt;account_config.yaml &lt;/em&gt;via the Account class).&lt;/p&gt;

&lt;p&gt;Now, I had made a perfectly good module. The only thing it needed was arguments send to Runner, which would activate it all. By doing a little research I figured if I created the directory &lt;strong&gt;bin/ &lt;/strong&gt;and threw in a file here, this file would automatically be inserted into the installers own bin (f.e. &lt;strong&gt;/usr/bin&lt;/strong&gt; on Linux if installed for all users). So I created the &lt;strong&gt;bin/&lt;/strong&gt; directory, and a file in here called &lt;strong&gt;&lt;a href=&quot;http://github.com/Sirupsen/Anyhub/blob/master/bin/anyhub&quot;&gt;anyhub&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt; &lt;/strong&gt;with a Ruby shebang at the top. This file simply instanced the Runner class with ARGV.&lt;/p&gt;

&lt;p&gt;Now this is just my little not-so-fancy gem theory. It's not exactly done this way (yet) because Anyhub didn't have an API at first - so I created the first version without the Account class, so it might not be exactly like this at the Github repo. just yet.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/Sirupsen/Anyhub&quot;&gt;Anyhub gem @ Github.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;LICENSE&lt;/h3&gt;
&lt;p&gt;Simply a file which contains the license for your project. By default MIT with Jeweler.&lt;/p&gt;

&lt;h3&gt;Rakefile&lt;/h3&gt;
&lt;p&gt;Rake configuration for your project. It is here you can define rake tasks, and configure your project (in terms of the name of it, dependencies, description and similar).&lt;/p&gt;

&lt;h3&gt;Readme.rdoc&lt;/h3&gt;
&lt;p&gt;The Readme file for your project. If you create a Github repo. it'll show up there. It is also &quot;the index&quot; for your Gems' documentation.&lt;/p&gt;

&lt;h3&gt;test/&lt;/h3&gt;
&lt;p&gt;It is here you create your tests.&lt;/p&gt;

&lt;h2&gt;Configuring your Gem&lt;/h2&gt;
&lt;p&gt;Remember a few lines ago, I told you how you could configure your Gem via &lt;strong&gt;Rakefile&lt;/strong&gt;? As you might have already guessed, we're going to open that very file now, to configure our example Gem.&lt;/p&gt;

&lt;p&gt;After &lt;strong&gt;rubygems&lt;/strong&gt; and &lt;strong&gt;rake &lt;/strong&gt;has been required by &lt;strong&gt;Rakefile &lt;/strong&gt;we see some fancy code, and then something which looks like some configuration. This is indeed where we configure our example Gem. You mostly only need to configure the summary and description the first time, I did it like this:&lt;/p&gt;
&lt;pre&gt;begin
  require 'jeweler'
  Jeweler::Tasks.new do |gem|
    gem.name = &quot;helloworld&quot;
    gem.summary = %Q{I'm a helloworld gem! I like to hello the world.}
    gem.description = %Q{This is a fancy little test gem.}
    gem.email = &quot;sirup@sirupsen.dk&quot;
    gem.homepage = &quot;http://github.com/Sirupsen/helloworld&quot;
    gem.authors = [&quot;Sirupsen&quot;]
    gem.add_development_dependency &quot;thoughtbot-shoulda&quot;, &quot;&amp;gt;= 0&quot;
    # gem is a Gem::Specification... see http://www.rubygems.org/read/chapter/  20 for additional settings
  end
  Jeweler::GemcutterTasks.new
rescue LoadError
  puts &quot;Jeweler (or a dependency) not available. Install it with: gem install   jeweler&quot;
end&lt;/pre&gt;

&lt;h3&gt;A little something more on configuring&lt;/h3&gt;
&lt;p&gt;.. which can be skipped.&lt;/p&gt;

&lt;p&gt;If your gem has any dependencies, you can add them here. Dependencies in this context mean&lt;em&gt; &quot;gems which my gem depends on&quot;&lt;/em&gt;. You &lt;strong&gt;should&lt;/strong&gt; add them, because if you do they are automatically installed along with your Gem whenever somebody tries to install your Gem. If you don't, they'll just get a good ton of errors when they try using your gem.&lt;/p&gt;

&lt;p&gt;Do add dependencies, simply add this to your &lt;strong&gt;Rakefile&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;gem.add_dependency &quot;gem&quot;, &quot;version&quot;&lt;/pre&gt;

&lt;p&gt;For example, in my gem I used the &lt;strong&gt;Curb &lt;/strong&gt;Gem, and therefore I added this to my &lt;strong&gt;Rakefile&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;gem.add_dependency &quot;curb&quot;, &quot;&amp;gt;= 0&quot;&lt;/pre&gt;
&lt;p&gt;(&lt;strong&gt;&amp;gt;= 0&lt;/strong&gt; just means &quot;I don't care about which version of the Gem it is, as long as it's there&quot;, mostly because I couldn't find much version-specific documentation Curb, otherwise I would have done this properly.)&lt;/p&gt;

&lt;h2&gt;Let's add some sample code&lt;/h2&gt;
&lt;p&gt;Now it's time to add some code to our &lt;strong&gt;helloworld &lt;/strong&gt;Gem. I simply open &lt;strong&gt;/lib/helloworld.rb&lt;/strong&gt;, and add these few lines of code:&lt;/p&gt;
&lt;pre&gt;module HelloWorld
  def self.do
    &quot;Hello World from the all mighty helloworld Gem!&quot;
  end
end&lt;/pre&gt;

&lt;p&gt;So &lt;strong&gt;HelloWorld.do&lt;/strong&gt; would return the string &lt;em&gt;&quot;Hello World from the all mighty helloworld Gem!&quot;. &lt;/em&gt;Great, so far, so good.&lt;/p&gt;

&lt;h2&gt;Version&lt;/h2&gt;
&lt;p&gt;In order to finish our Gem, we need a version file. Now because Jeweler is so awesome, we don't even need to use our editor to do this, simply execute the following command:&lt;/p&gt;
&lt;pre&gt;$ rake version:write&lt;/pre&gt;

&lt;p&gt;And the VERSION file is created. It's not &lt;em&gt;that&lt;/em&gt; fancy though.&lt;/p&gt;
&lt;pre&gt;$ cat VERSION
0.0.0&lt;/pre&gt;

&lt;p&gt;But that seems correct. This is our first Gem build, so of course, the version is 0.0.0 as of now!&lt;/p&gt;

&lt;h2&gt;Install it!&lt;/h2&gt;
&lt;p&gt;Now you can install the Gem. It's very easy:&lt;/p&gt;

&lt;pre&gt;$ rake install
Password:
(in /home/sirup/Code/Ruby/helloworld)
Generated: helloworld.gemspec
helloworld.gemspec is valid.
WARNING:  no rubyforge_project specified
  Successfully built RubyGem
  Name: helloworld
  Version: 0.0.0
  File: helloworld-0.0.0.gem
Executing &quot;gem install ./pkg/helloworld-0.0.0.gem&quot;:
gem install ./pkg/helloworld-0.0.0.gem
Successfully installed helloworld-0.0.0
1 gem installed
Installing ri documentation for helloworld-0.0.0...
Updating class cache with 1983 classes...
Installing RDoc documentation for helloworld-0.0.0...&lt;/pre&gt;

&lt;h2&gt;Moment of truth&lt;/h2&gt;
&lt;pre&gt;irb --simple-prompt
&amp;gt;&amp;gt; require 'helloworld'
=&amp;gt; true
&amp;gt;&amp;gt; HelloWorld.do
=&amp;gt; &quot;Hello World from the all mighty helloworld Gem!&quot;&lt;/pre&gt;

&lt;p&gt;(&lt;strong&gt;Note&lt;/strong&gt;: If you are &lt;strong&gt;not&lt;/strong&gt; using Ruby 1.9, you might need to &lt;em&gt;require 'rubygems'&lt;/em&gt; before requiring &lt;strong&gt;helloworld&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Awesome, it works. I hope this has helped you towards creating your first gem. You are welcome to leave a comment, or contact me if you run into any trouble.&lt;/p&gt;

&lt;h2&gt;Further information&lt;/h2&gt;
&lt;p&gt;You'll find it all if you visit &lt;a href=&quot;http://github.com/technicalpickles/jeweler&quot;&gt;Jeweler at Github&lt;/a&gt;. Below is for quick reference.&lt;/p&gt;

&lt;h3&gt;Github&lt;/h3&gt;
&lt;p&gt;I advice you to commit all your code, and push it to Github. Makes it easy for other people to view the source, post issues, and participate in your project.&lt;/p&gt;

&lt;p&gt;Github because it's sort of the standard for Ruby open source projects.&lt;/p&gt;

&lt;h3&gt;Releasing Gem at Gemcutter&lt;/h3&gt;
&lt;p&gt;If you feel like sharing your Gem to the world (and you probably do). Register an account at &lt;a href=&quot;http://rubygems.org/&quot;&gt;Gemcutter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And now you are ready to release your Gem. Simply run:&lt;/p&gt;
&lt;pre&gt;$  rake gemcutter:release&lt;/pre&gt;

&lt;p&gt;To release your gem. (You can also release it at RubyForge instead if you wish so, see &lt;a href=&quot;http://github.com/technicalpickles/jeweler/blob/master/README.markdown&quot;&gt;the Jeweler readme&lt;/a&gt;) You might be asked to sign in to your account, simply do so whenever prompted.&lt;/p&gt;

&lt;h3&gt;Workflow&lt;/h3&gt;
&lt;p&gt;.. taken directly from the &lt;a href=&quot;http://wiki.github.com/technicalpickles/jeweler/workflow&quot;&gt;Jeweler Wiki.&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;&lt;code&gt;gem install jeweler&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://wiki.github.com/technicalpickles/jeweler/create-a-new-project&quot;&gt;Create a new project&lt;/a&gt; and customize it, or &lt;a href=&quot;http://wiki.github.com/technicalpickles/jeweler/configure-an-existing-project&quot;&gt;configure an existing project&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Write good code, and commit it&lt;/li&gt;
	&lt;li&gt;Bump the version with one of the rake tasks:
&lt;ul&gt;
	&lt;li&gt;&lt;code&gt;rake version:bump:patch&lt;/code&gt; 1.5.3 → 1.5.4&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;rake version:bump:minor&lt;/code&gt; 1.5.3 → 1.6.0&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;rake version:bump:major&lt;/code&gt; 1.5.3 → 2.0.0&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;rake version:write MAJOR=2 MINOR=3 PATCH=6&lt;/code&gt; 1.5.3 → 2.3.6&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
	&lt;li&gt;Release it
&lt;ul&gt;
	&lt;li&gt;&lt;code&gt;rake release&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;Optionally release it to &lt;a href=&quot;http://wiki.github.com/technicalpickles/jeweler/rubyforge&quot;&gt;Rubyforge&lt;/a&gt;: &lt;code&gt;rake rubyforge:release&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;Optionally release it to &lt;a href=&quot;http://wiki.github.com/technicalpickles/jeweler/gemcutter&quot;&gt;Gemcutter&lt;/a&gt;: &lt;code&gt;rake gemcutter:release&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
	&lt;li&gt;Go to #2&lt;/li&gt;

&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>One terminal, just one</title>
   <link href="http://sirupsen.github.com/one-terminal-just-one"/>
   <updated>2010-04-06T00:00:00+08:00</updated>
   <id>http:/sirupsen.github.com/one-terminal-just-one</id>
   <content type="html">&lt;p&gt;Until not-so-long ago, I always had a million terminals open at the same time. I have this neat keyboard-shortcut (Alt-T) which opens a new terminal. That&amp;#8217;s nice and all, but the problem is, that I can&amp;#8217;t be arsed to alt-tab to my old terminals, leaving a million terminals open, making alt-tabbing between other applications a pain. And I rely quite a bit on Alt-tab, I don&amp;#8217;t have any task bar, since I&amp;#8217;d rather just alt-tab between stuff than clicking on a task bar (which also takes up precious screen space).&lt;/p&gt;
&lt;p&gt;So yes, one day I realised I really had this problem. So I scaled it down, my goal was to: On launch it looks for terminals.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If any terminal is found, this terminal should appear in front of all other windows, instead of launching a new terminal. If, however, no terminals are present, a new one should be launched.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That&amp;#8217;s when I realised: &lt;strong&gt;&amp;#8220;How-the-bob am I going to do this?&amp;#8221;&lt;/strong&gt;- Google to the rescue, and I eventually scaled down each problem in the application, and found a neat little application called &lt;span class=&quot;fixed-width&quot;&gt;wmctrl&lt;/span&gt; which (apparently) handles Windows. And by looking a bit at this application, I came up with this script, which handles the problem nicely:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#! /bin/bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;WINTITLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;sakura&amp;quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Name of the window (or part of it)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PROGRAMNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;sakura&amp;quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Name of the program, so it can be opened if there&amp;#39;s no window currently&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Lists all windows, if there&amp;#39;s one containing $WINTITLE it&amp;#39;ll return 1, and bring the current instance of the program to the front.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;wmctrl -l | grep -c &lt;span class=&quot;s2&quot;&gt;&amp;quot;$WINTITLE&amp;quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; !&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;    &lt;/span&gt;wmctrl -a &lt;span class=&quot;s2&quot;&gt;&amp;quot;$WINTITLE&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Else, it&amp;#39;ll launch a new instance&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$PROGRAMNAME&lt;/span&gt; &amp;amp;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# We&amp;#39;re good!&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Just change the variables to reflect your environment, it should be rather obvious what to change. So yeah, you just c/p this script to a &lt;span style=&quot;fixed-width;&quot;&gt;whatever.sh&lt;/span&gt; file, and put it in your &lt;span style=&quot;fixed-width;&quot;&gt;bin&lt;/span&gt; and launch your terminal via this script from now on. It&amp;#8217;s also in my &lt;a href=&quot;http://github.com/Sirupsen/Kittybin&quot;&gt;Kittybin&lt;/a&gt;, I might cover some of the other scripts from there in further blog posts. :)&lt;/p&gt;
&lt;p&gt;And there we go. &lt;strong&gt;Problem solved.&lt;/strong&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>My experience with Arch Linux</title>
   <link href="http://sirupsen.github.com/my-experience-with-arch-linux"/>
   <updated>2010-04-06T00:00:00+08:00</updated>
   <id>http:/sirupsen.github.com/my-experience-with-arch-linux</id>
   <content type="html">&lt;p&gt;After about 8 months with &lt;a href=&quot;http://www.ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt;, I decided it was time for change. I had for a while wanted to switch to some other distribution, not because I did not like Ubuntu, more because I wanted to learn more about Linux, and try something new. And I felt Ubuntu limited me in this direction. Furthermore, I wanted to have a system which I did not feel I had to reinstall whenever new major updates came out, I wanted a system I could improve over time. I wanted a system where I could switch desktop environment/window manager quickly, and without googling myself on how to then remove all the old, now useless, packages. And rolling-release seems to be the solution, to that problem.&lt;/p&gt;

&lt;p&gt;I quickly found a distro. which seemed to fit my requirements, &lt;a href=&quot;http://www.archlinux.org/&quot;&gt;Arch Linux&lt;/a&gt;. Arch Linux is lightweight, and simple. I found a quote on the Wiki, which describes it quite well: &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Linux, with a nice package manager.” &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And my edition:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Linux, with an nice package manager, and a kick-ass Wiki.” &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That Wiki seriously provides the best information on everything you’ll ever need to know - I have yet to run into a problem which is not described here.&lt;/p&gt;

&lt;p&gt;With Arch, you basically start with bare-bones Linux, which can boot into a CLI, has the basic stuff like Vi, grep, and these kind of basic Unix tools, that you’d have to install anyway, as well as a tool with which you can install packages. From there, you simply start building your system with the &lt;a href=&quot;http://wiki.archlinux.org/index.php/Beginners'_Guide&quot;&gt;Arch Linux beginner’s guide&lt;/a&gt; (which is extremely well written). You install Vim, Xorg, Drivers, and so on. As it was my first (and hopefully only on this computer) install, I took good time to do each step, to understand what I was installing, and why I was installing it. Once I had Xorg up (I already felt like I had learned a lot more about how Linux works at a lower level. I was already starting to really like Arch Linux.&lt;/p&gt;

&lt;p&gt;At some point when Xorg was set up, I wanted a &lt;a href=&quot;http://wiki.archlinux.org/index.php/Window_manager&quot;&gt;Window Manager&lt;/a&gt;. And it’s really a dungeon there. There are hundreds of different Window Managers, tiling, not-tiling, and these big desktop environments (Gnome, KDE). I had already decided I didn’t want to go for a desktop environment, since then I’d have loads of gui-configuring-tools, and not learn exactly where configuration files are located (&lt;em&gt;oh how I search the knowledge&lt;/em&gt;). I quickly figured out that &lt;a href=&quot;http://openbox.org/wiki/Main_Page&quot;&gt;Openbox&lt;/a&gt; was very popular on the Arch Linux forums. So I decided to install it, and found the neat &lt;a href=&quot;http://rent0n86.deviantart.com/art/Arkid-148937983&quot;&gt;Arkid theme&lt;/a&gt;, somebody had posted it in a screenshot thread on the Arch Linux forums. I’ve found Openbox to be great, and fit my needs.&lt;/p&gt;

&lt;p&gt;From there, it was just a matter of setting up all the stuff I usually set up when I install Ubuntu: Vim, Chrome, Pidgin, a music player, Dropbox, and so on. And Pacman (the Arch Linux package manager) made this a pleasing experience. I ran into a few packages which I could not install with Pacman however. But, I quickly figured there was something called &lt;a href=&quot;http://aur.archlinux.org/&quot;&gt;AUR&lt;/a&gt; (the Arch User Repository), in which I have yet to not find a package, this helps me get minimum headaches, since the AUR packages usually compile OTB, running the right &lt;strong&gt;./configure&lt;/strong&gt; etc. And of course, my fellow Arch Linux users have also provided me with tools which allows easy installation from AUR. I found a tool called &lt;a href=&quot;http://bbs.archlinux.org/viewtopic.php?id=91860&quot;&gt;Clyde&lt;/a&gt;, which works great. Basically a layer on Pacman with &lt;a href=&quot;http://bbs.archlinux.org/viewtopic.php?id=91860&quot;&gt;AUR&lt;/a&gt; support.&lt;/p&gt;

&lt;p&gt;I’ve been running this system for a few weeks (as of this update, months), and I feel at home. I love it really. If you are looking to try something new, and already got some Linux experience, then you should defiantly go and try Arch Linux! Should you run into issues you have trouble addressing the people at #archlinux on chat.freenode.net are helpful.&lt;/p&gt;

&lt;p&gt;Here’s a screenshot of my Archbox, because everyone loves screenshots.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://img202.imageshack.us/img202/8011/201004050121043200x1080.png&quot;&gt;&lt;img src=&quot;/static/images/arch.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Slow internet under Ubuntu or Linux</title>
   <link href="http://sirupsen.github.com/slow-internet-under-ubuntu-or-linux"/>
   <updated>2009-10-31T00:00:00+08:00</updated>
   <id>http:/sirupsen.github.com/slow-internet-under-ubuntu-or-linux</id>
   <content type="html">&lt;h2&gt;Fix one: &lt;span class=&quot;caps&quot;&gt;DNS&lt;/span&gt; issue&lt;/h2&gt;
&lt;p&gt;Ever since I started using Linux, I&amp;#8217;ve run into issues regarding internet performance; it was unstable &amp;#8211; it would take it several seconds, sometimes 10-20, to look up the host for most sites. Overall, it was very unstable &amp;#8211; and rather unusable for a heavy surfer like me.&lt;/p&gt;
&lt;p&gt;Download speed, and basically everything but the browser worked fine. Thus, I concluded that it could have something to do with the &lt;span class=&quot;caps&quot;&gt;DNS&lt;/span&gt; &amp;#8211; and I was right. I switched to &lt;a href=&quot;http://www.opendns.com/&quot;&gt;OpenDNS&lt;/a&gt;, and it was running normally &amp;#8211; here&amp;#8217;s [the guide from &lt;a href=&quot;https://store.opendns.com/setup/device/ubuntu/&quot;&gt;OpenDNS&lt;/a&gt; on configuring OpenDNS on Ubuntu, should you be using another Linux distro., simply Google something like &lt;strong&gt;linux-distro opendns&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I also stumbled upon &lt;a href=&quot;http://code.google.com/p/namebench/&quot;&gt;Namebench&lt;/a&gt; in the process, which is a little Python application that attempts to find the fastest &lt;span class=&quot;caps&quot;&gt;DNS&lt;/span&gt; for you &amp;#8211; which you can use to optimize performance further.&lt;/p&gt;
&lt;h2&gt;Fix two: IPV6&lt;/h2&gt;
&lt;p&gt;Currently, the standard for IPs is IPV4 &amp;#8211; the thing is, that there&amp;#8217;s always a limit towards to maximum number of IP-adresses available. We&amp;#8217;re nearing this limit rapidly with IPV4, and therefore IPV6 is set to replace the old IPV4. &lt;sup class=&quot;footnote&quot; id=&quot;fnr1&quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; However, some providers doesn&amp;#8217;t support IPV6 yet, and Linux might attempt to use IPV6, conclude it fails, and then use IPV4 &amp;#8211; each time it connects. This can be result in bad performance. Luckily, you can disable the IPV6 kernel  module, which fixes this.&lt;/p&gt;
&lt;h3&gt;Fixing on Debian-based systems&lt;/h3&gt;
&lt;p&gt;I don&amp;#8217;t know for sure, if this is the routine on anything non-debian based. I know this is not the way to go on e.g. Arch Linux. Debian-based systems include Linux Mint and Ubuntu.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You should be able to disable IPv6 by adding &lt;span class=&quot;fixed-width&quot;&gt;ipv6.disable=1&lt;/span&gt; to kernel boot parameters (editing Grub config in &lt;span class=&quot;fixed-width&quot;&gt;/boot/grub/menu.lstand&lt;/span&gt; running &lt;span class=&quot;fixed-width&quot;&gt;sudo update-grub&lt;/span&gt; as instructed for example here). &lt;sup class=&quot;footnote&quot; id=&quot;fnr2&quot;&gt;&lt;a href=&quot;#fn2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Other distros&lt;/h3&gt;
&lt;p&gt;Again, use Google and you&amp;#8217;ll probably be geared towards a Wiki, or forum thread for your specific distro.&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn1&quot;&gt;&lt;a href=&quot;#fnr1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;http://en.wikipedia.org/wiki/IPv6&quot;&gt;http://en.wikipedia.org/wiki/IPv6&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn2&quot;&gt;&lt;a href=&quot;#fnr2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;http://superuser.com/questions/67921/slow-website-loading-on-ubuntu-karmic&quot;&gt;http://superuser.com/questions/67921/slow-website-loading-on-ubuntu-karmic&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Become a Dropbox ninja!</title>
   <link href="http://sirupsen.github.com/become-a-dropbox-ninja"/>
   <updated>2009-10-31T00:00:00+08:00</updated>
   <id>http:/sirupsen.github.com/become-a-dropbox-ninja</id>
   <content type="html">&lt;p&gt;I&amp;#8217;ve known &lt;a href=&quot;http://dropbox.com&quot;&gt;Dropbox&lt;/a&gt; for very long. I&amp;#8217;ve already found it to be an extremely cool service, however &amp;#8211; I like to have things automated, the little programmer inside all of us. I didn&amp;#8217;t want to &amp;#8220;Drop&amp;#8221; my files manually into the Dropbox folder all the time. That was time consuming, and I would forget to do it &amp;#8211; sort of eliminating the purpose.&lt;/p&gt;
&lt;p&gt;I wanted Dropbox to sync everything automatically across all my machine, I wanted to still have my files where they would originally be on my Desktop. On my Laptop, that didn&amp;#8217;t matter &amp;#8211; since I only use it for browsing the web, sometimes I program a bit on it, though. On my Desktop, I have all my Photos, configuration files, and code. I wanted to have these files available everywhere, anytime.&lt;/p&gt;
&lt;p&gt;The solution to this was simple, very simple because of symbolic links, under Linux (my desktop, and main computer) I&amp;#8217;d just download Dropbox, and place the special folder in my &lt;span class=&quot;fixed&quot;&gt;~&lt;/span&gt;, then start throwing symbolic links in. First of, my photos.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ln -s Photos Dropbox/Photos
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then all my local code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ln -s /var/www Dropbox/Programming
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then my &lt;span class=&quot;fixed&quot;&gt;Dumper&lt;/span&gt; which is basically anything else than videos, photos, music and programming:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ln -s Dumper Dropbox/Dumper
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In my dumper I even did symbolic links to some of the configuration directories (e.g. &lt;span class=&quot;fixed&quot;&gt;Vim&lt;/span&gt; configuration, &lt;span class=&quot;fixed&quot;&gt;.bashrc&lt;/span&gt; etc.)&lt;/p&gt;
&lt;p&gt;It started syncing, and now the magic of Dropbox is a lot more tempting to me. I now have everything, and the most recent version of it, available everywhere (iPhone, Laptop, Web), and it&amp;#8217;s securely backed up.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/dropbox.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;If Dropbox seems tempting to you (now?), be sure to sign up at &lt;a href=&quot;http://dropbox.com&quot;&gt;Dropbox.com&lt;/a&gt; If you&amp;#8217;d like to help me, and yourself, you can signup via &lt;a href=&quot;https://www.getdropbox.com/referrals/NTgzODk4OTk&quot;&gt;my referral link&lt;/a&gt; and you&amp;#8217;ll get (and give) 250 mb extra to the 2gb default free limit!&lt;/p&gt;
&lt;p&gt;Furthermore, Dropbox has &lt;a href=&quot;http://wiki.getdropbox.com/&quot;&gt;a great wiki&lt;/a&gt; with &lt;a href=&quot;http://wiki.getdropbox.com/DropboxAddons&quot;&gt;various addons&lt;/a&gt; and &lt;a href=&quot;http://wiki.getdropbox.com/TipsAndTricks&quot;&gt;tips &amp;amp; and tricks&lt;/a&gt; . They even have a &lt;span class=&quot;caps&quot;&gt;CLI&lt;/span&gt; to Dropbox, which I use nowadays on Arch Linux when I&amp;#8217;m without &lt;span class=&quot;fixed&quot;&gt;Nautilus&lt;/span&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Starting with Git!</title>
   <link href="http://sirupsen.github.com/starting-with-git"/>
   <updated>2009-09-12T00:00:00+08:00</updated>
   <id>http:/sirupsen.github.com/starting-with-git</id>
   <content type="html">&lt;p&gt;The purpose of this&lt;strong&gt; guide&lt;/strong&gt; or &lt;strong&gt;tutorial&lt;/strong&gt; is to give a brief overview of how to work with Git, even for people who've &lt;strong&gt;never&lt;/strong&gt; had any experience with version controlling. This guide anticipates that you:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Have &lt;strong&gt;a bit&lt;/strong&gt; experience with working in the terminal&lt;/li&gt;
	&lt;li&gt;Common sense&lt;/li&gt;
&lt;/ul&gt;
I will teach you how to:
&lt;ul&gt;
	&lt;li&gt;Set up a Github repository&lt;/li&gt;
	&lt;li&gt;Upload content to your Github repository&lt;/li&gt;
	&lt;li&gt;Work with Git&lt;/li&gt;
	&lt;li&gt;Simple collaboration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A lot of people still believe SVN is much better than Git. However, this is not the case. SVN's way of handling repositories is bad, it means everyone pushes to the same master &quot;repository&quot;. In Git &lt;span style=&quot;background-color: #ffffff;&quot;&gt;everyone has their own, which is a lot smarter. I'm not going to go in depth about the difference, since a lot of people, with &lt;strong&gt;much&lt;/strong&gt; more knowledge about Git and SVN than me, already did that. So you can Google your way to that.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;With that in shape, let's get started!&lt;/p&gt;

&lt;!--more--&gt;
&lt;h2&gt;Installing Git&lt;/h2&gt;
&lt;p&gt;Before starting this guide, you should have Git installed locally. You can download Git &lt;a title=&quot;Download git&quot; href=&quot;http://git-scm.com/download&quot;&gt;here.&lt;/a&gt; If you run Linux, there's a good chance that you can install it via your favorite package manager. For Ubuntu's package manager (Aptitude) the terminal command is:&lt;/p&gt;

&lt;pre&gt;sudo aptitude install git-core&lt;/pre&gt;

&lt;p&gt;You should most likely be able to type: &quot;git&quot; in the terminal, and it would give you the instructions on how to install it. This guide is not to cover the installation, but to teach the usage of Git. If you have troubles with installing, try to Google your way around!&lt;/p&gt;

&lt;a href=&quot;http://img33.imageshack.us/img33/2483/275300x159.png&quot;&gt;&lt;img class=&quot;alignright&quot; title=&quot;Github Project&quot; src=&quot;http://img33.imageshack.us/img33/2483/275300x159.png&quot; alt=&quot;A sample project at Github&quot; width=&quot;300&quot; height=&quot;159&quot; /&gt;&lt;/a&gt;
&lt;h2 style=&quot;font-size: 1,5em;&quot;&gt;&lt;strong&gt;Github&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;It has a lot of features, including graphs for your project, issue tracker and a wiki for your project.&lt;/p&gt;

Before you start on the next step, please register at&lt;a href=&quot;http://github.com/&quot;&gt; Github&lt;/a&gt;.

&lt;h2&gt;Creating your first Repository&lt;/h2&gt;

&lt;p&gt;Our goal is to make a new repository, and upload a few files to it. Before we can do this though, we need to set up Git, so that Github knows who you are when you push things to their server.&lt;/p&gt;

&lt;h3&gt;Configuring Git&lt;/h3&gt;
&lt;p&gt;Configuring Git is very important, I used the first couple of hours with Git having headaches about Github not recognizing me, when I pulled stuff from my repositories at Github. However, it's pretty straight forward to configure.&lt;/p&gt;

&lt;p&gt;We need to do two things:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Create an SSH-key&lt;/li&gt;
	&lt;li&gt;Provide this SSH-key to Git&lt;/li&gt;
	&lt;li&gt;Introduce ourselves to Git!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is no reason for me to reinvent the wheel, Github has already done this. First, read their guide about &lt;a href=&quot;http://github.com/guides/providing-your-ssh-key&quot;&gt;Providing your SSH Key&lt;/a&gt;, then go ahead and &lt;a href=&quot;http://github.com/guides/tell-git-your-user-name-and-email-address&quot;&gt;Tell git your user name and email address&lt;/a&gt;.&lt;/p&gt;

&lt;a href=&quot;http://github.com/repositories/new&quot;&gt;&lt;img class=&quot;size-medium wp-image-34 alignleft&quot; style=&quot;padding-left: 5px;&quot; title=&quot;Create a new Project&quot; src=&quot;http://img197.imageshack.us/img197/2483/275300x159.png&quot; alt=&quot;The dialog to create a new project&quot; width=&quot;300&quot; height=&quot;159&quot; /&gt;&lt;/a&gt;

&lt;h3 style=&quot;font-size: 1,17em;&quot;&gt;Creating the Repository&lt;/h3&gt;
&lt;p&gt;Creating our own repository is pretty straight forward. Go to Github, login and you'll be at your dashboard. At the right you should see &lt;a href=&quot;/repositories/new&quot;&gt;(create a new one)&lt;/a&gt;. Click it, and it'll take you to the page where you can create your project.&lt;/p&gt;

&lt;p&gt;Fill out the fields as you like, I'll call my project &quot;Test&quot;. Hit submit. Now you've created your online Git repository!&lt;/p&gt;

&lt;img class=&quot;size-medium wp-image-35 alignright&quot; style=&quot;padding-left: 5px;&quot; title=&quot;Github new Repository&quot; src=&quot;http://img197.imageshack.us/img197/7453/276300x289.png&quot; alt=&quot;Here's the new repository I created&quot; width=&quot;300&quot; height=&quot;289&quot; /&gt;

&lt;p&gt;You'll be taken to your new project, and you'll notice Github provides you a small guide on how to upload the first files to your project! Again, let's just follow Github's guide once again.&lt;/p&gt;

&lt;p&gt;The first step is the Global setup step, we don't need to do this though, but because you followed the guides before, this is already done! I find it weird though, it doesn't tell you to provide your SSH key. Ignore this step.&lt;/p&gt;

&lt;p&gt;However, we can follow the next steps:&lt;/p&gt;

&lt;p&gt;Fire up a terminal, and type (replace Test with the name of the name of the repository you created on Github):&lt;/p&gt;
&lt;pre&gt; mkdir Test&lt;/pre&gt;

&lt;p&gt;Afterwards, navigate into this new directory by typing:&lt;/p&gt;
&lt;pre&gt; cd Test&lt;/pre&gt;

&lt;p&gt;Instance Git inside this directory by typing:&lt;/p&gt;
&lt;pre&gt; git init&lt;/pre&gt;

&lt;p&gt;Create a new file by typing:&lt;/p&gt;
&lt;pre&gt; touch README&lt;/pre&gt;

&lt;p&gt;Add this file to the repository by typing:&lt;/p&gt;
&lt;pre&gt; git add README&lt;/pre&gt;

&lt;p&gt;Now, let's make a change to this file, by writing something to it:&lt;/p&gt;
&lt;pre&gt; echo &quot;Hello, is this on Github?!&quot; &amp;gt; README&lt;/pre&gt;

&lt;p&gt;Now, we need to commit. Committing is a small message of what you just did (we'll cover more about that later):&lt;/p&gt;
&lt;pre&gt; git commit -m 'Initial upload'&lt;/pre&gt;
&lt;img class=&quot;size-medium wp-image-38 alignleft&quot; style=&quot;padding-left: 5px;&quot; title=&quot;README File&quot; src=&quot;http://img197.imageshack.us/img197/8923/277300x170.png&quot; alt=&quot;README file on Github&quot; width=&quot;300&quot; height=&quot;170&quot; /&gt;

&lt;p&gt;Next, we need to add the online Github repository (the origin), this is done by adding a remote origin (notice that you'll need to change &quot;Sirupsen&quot; and &quot;Test&quot; to reflect your own user, and repository):&lt;/p&gt;
&lt;pre style=&quot;font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace;&quot;&gt; git remote add origin git@github.com:Sirupsen/Test.git&lt;/pre&gt;
And finally, let's push it to Github.
&lt;pre style=&quot;font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace;&quot;&gt; git push origin master&lt;/pre&gt;
&lt;p&gt;(This means we push the commits to the origin (master repository), at the master branch)&lt;/p&gt;

&lt;p&gt;Now, go to your Github repository and you should notice a file named &quot;README&quot;, if you open it you should see whatever you echoed into that file.&lt;/p&gt;

&lt;p&gt;Now you've added your first file to Github! Continue to learn more about how to work with Git.&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Working with Git&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Now you know how to do the most basic stuff with Git, and Github:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Creating a local folder to represent your Git repository&lt;/li&gt;
	&lt;li&gt;Committing changes to a file&lt;/li&gt;
	&lt;li&gt;Update this on the server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this, you can do the most basic stuff with Git. Now I will introduce you to some of the more exciting features of Git.&lt;/p&gt;
&lt;h2&gt;Pulling changes from the origin&lt;/h2&gt;
&lt;a href=&quot;http://blog.kirth.be/wp-content/uploads/2009/09/279.png&quot;&gt;&lt;img class=&quot;alignright&quot; style=&quot;padding-left: 5px; border: 0px initial initial;&quot; title=&quot;Edit File on Github&quot; src=&quot;http://img195.imageshack.us/img195/8963/279300x126.png&quot; alt=&quot;Click Edit to edit the file&quot; width=&quot;300&quot; height=&quot;126&quot; /&gt;&lt;/a&gt;

&lt;p&gt;But, what if I change something online. And would like to apply these updates on my local copy of the repository? That's what we're going to do now. First, let's go to our Github repository. Click on the file you'd like to edit (you'll probably only have your README file currently). When your viewing the file, you can chose edit to edit it.&lt;/p&gt;

&lt;p&gt;Now you can edit your file. Make a few changes - create a small commit message, then hit commit.&lt;/p&gt;

&lt;a href=&quot;http://blog.kirth.be/wp-content/uploads/2009/09/280.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-40 alignleft&quot; style=&quot;padding-left: 5px;&quot; title=&quot;Editting a file on Github&quot; src=&quot;http://img195.imageshack.us/img195/7143/280300x179.png&quot; alt=&quot;Editing a file on Github&quot; width=&quot;300&quot; height=&quot;179&quot; /&gt;&lt;/a&gt;

&lt;p&gt;Now, when you've added some stuff to your README file, it's time to pull the changes to your local repository. Open up the terminal where you arranged yourself into the Test directory, and pull from the origin:&lt;/p&gt;
&lt;pre&gt; git pull origin master&lt;/pre&gt;

&lt;p&gt;Try to open the README file again, and you should see the changes you made on Github! Another way to check the output is by writing:&lt;/p&gt;
&lt;pre&gt; cat -A README&lt;/pre&gt;

&lt;p&gt;Which will output the contents of the file directly in the terminal.&lt;/p&gt;
&lt;h2 style=&quot;font-size: 1,5em;&quot;&gt;Cloning a repository&lt;/h2&gt;

&lt;p&gt;Instead of making a directory, adding the origin, and pulling, each time you&lt;span style=&quot;background-color: #ffffff;&quot;&gt;need a copy of your repository. You can simply use the clone command, which clones the repository to your machine. Let's try it. First, delete your local copy of the repository.&lt;/span&gt;&lt;/p&gt;

&lt;a href=&quot;http://img195.imageshack.us/img195/1087/281300x44.png&quot;&gt;&lt;img class=&quot;alignright&quot; style=&quot;padding-left: 5px; border: 0px initial initial;&quot; title=&quot;Github Repository Information&quot; src=&quot;http://img195.imageshack.us/img195/1087/281300x44.png&quot; alt=&quot;Github repository informations&quot; width=&quot;300&quot; height=&quot;44&quot; /&gt;&lt;/a&gt;

&lt;p&gt;Next, go to your Github repository, and on the top locate your private clone URL (see picture to the right). &lt;span style=&quot;background-color: #ffffff;&quot;&gt;Copy it, and go to your terminal and type (replace my URL, with your own private clone URL):&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt; git clone git@github.com:Sirupsen/Test.git&lt;/pre&gt;

&lt;p&gt;And then you should have a fresh copy of your repository!&lt;/p&gt;
&lt;h2&gt;Deleting files from your repository&lt;/h2&gt;
&lt;p&gt;Sometimes you may need to delete files permanently from your Git repository. The command for this is almost the same as the basic delete command (&quot;rm&quot;), we just need to have git in front of it. This command will both remove the file form your harddrive, as well as remove it from the git repository.&lt;/p&gt;

&lt;p&gt;For instance, I've added a file called &quot;INSTALL&quot;. But I ended up just adding this text to the README file. I already added the content of the INSTALL file to the README file, and committed these changes - but now I want to delete the INSTALL file, as it serves no purpose anymore.&lt;/p&gt;

&lt;p&gt;To delete the file, we type:&lt;/p&gt;
&lt;pre&gt; git rm INSTALL&lt;/pre&gt;

&lt;p&gt;And then we need to commit the changes:&lt;/p&gt;
&lt;pre&gt; git commit -m 'Removed INSTALL file, due to content having been appended to the README file'&lt;/pre&gt;

&lt;p&gt;Finally, push it to Github:&lt;/p&gt;
&lt;pre&gt; git push origin master&lt;/pre&gt;

&lt;p&gt;Simple, right?&lt;/p&gt;
&lt;h2&gt;The Difference&lt;/h2&gt;

&lt;p&gt;At some point you might have just cleaned up a few files, and totally forgot about commiting.  Its ok if you don't even remember which files you edited. To find the difference from the Github repository, and your local copy simply type:&lt;/p&gt;
&lt;pre&gt; git diff&lt;/pre&gt;

&lt;p&gt;And it'll show what is different. As it might be a bit pain to add each individual file like this:&lt;/p&gt;
&lt;pre&gt; git add file1 file2 file3 file4&lt;/pre&gt;

&lt;p&gt;And then give them a shared commit, there's an easier way:&lt;/p&gt;
&lt;pre&gt; git commit -a -m 'Cleaned up files'&lt;/pre&gt;

&lt;p&gt;This takes all the files which are different from the main repository (Github), and gives them the commit entered after -m. This is also good when you are editing a single file, because instead of:&lt;/p&gt;
&lt;pre&gt; git add file&lt;/pre&gt;
&lt;pre&gt; git commit -m 'Added function to calculate average'&lt;/pre&gt;
You can do:
&lt;pre&gt; git commit -a -m 'Added function to calculate average'&lt;/pre&gt;
&lt;p&gt;It automatically picks up the changed file(s), and then commits them. Cool, right?&lt;/p&gt;

&lt;h2&gt;Workflow&lt;/h2&gt;
&lt;p&gt;Now you know all the basic commands of git, and you know how to work with Github. Let's take a quick look at an example of how our workflow could be like now:&lt;/p&gt;

&lt;p&gt;I create a file, and call it index.php, I've already added some stuff to it. Now, I want to push it to Github:&lt;/p&gt;
&lt;pre&gt; git add index.php&lt;/pre&gt;
&lt;pre&gt; git commit -m 'Added index file'&lt;/pre&gt;
You might ask now, why don't we use:
&lt;pre&gt; git commit -a -m 'Added index file'&lt;/pre&gt;
-a will not add new files to the repository, you'll have to do that with add the first time.
Alright, now I've added the file. I make some more changes to the file, and I commit it:
&lt;pre&gt; git commit -a -m 'Added a menu'&lt;/pre&gt;
Now I think it's good enough, to be pushed to Github:
&lt;pre&gt; git push origin master&lt;/pre&gt;
These 3 commands are by far the ones which you are going to use the most.
&lt;ul&gt;
	&lt;li&gt;Commit&lt;/li&gt;
	&lt;li&gt;Add&lt;/li&gt;
	&lt;li&gt;Push&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I said  before, it's very important that you commit every time you can rinse up what you've done in one sentence. Commit messages must be short, and precise. You should maybe use some time on your first commits, but over time you should learn creating small informative and useful commits. That's all for now, we might come around collaboration in Git in a later post. The best way to learn is always trying out, and if you don't know how to do something, use Google!&lt;/p&gt;

&lt;p&gt;For further reading go to Git's official website, and &lt;a href=&quot;http://git-scm.com/&quot;&gt;read the documentation.&lt;/a&gt; Github also has &lt;a href=&quot;http://github.com/guides/home&quot;&gt;several amazing articles on Git! &lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Dual booting Windows and Linux</title>
   <link href="http://sirupsen.github.com/dual-booting-windows-and-linux"/>
   <updated>2009-09-12T00:00:00+08:00</updated>
   <id>http:/sirupsen.github.com/dual-booting-windows-and-linux</id>
   <content type="html">&lt;p&gt;When I for the first time wanted to try out Linux, I couldn't at first glance find a simple guide on how to dual-boot Windows and Linux. So I decided to write a quick simple guide for you, to give an overview of how to create your own dual boot system. You should have the following stuff solved before you try this out:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Windows CD
&lt;ul&gt;
	&lt;li&gt;Be sure you have a valid serial for it, and so on&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
	&lt;li&gt;Linux CD
&lt;ul&gt;
	&lt;li&gt;Ubuntu, Fedora, Mint or whatever you might prefer&lt;/li&gt;
	&lt;li&gt;Check out &lt;a href=&quot;http://distrowatch.com/&quot;&gt;distrowatch&lt;/a&gt; if you have yet to decide&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
	&lt;li&gt;Backup of &lt;strong&gt;all&lt;/strong&gt; your important files
&lt;ul&gt;
	&lt;li&gt;Also configuration files are handy to have&lt;/li&gt;
	&lt;li&gt;.. and plugins!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When this is solved, you should be ready to get started.&lt;/p&gt;

&lt;p&gt;What you do when you want two operation systems, is basically you have a partition for each. Linux requires an additional swap partition, Windows requires only one partition for the entire system. You can even share a partition between both operation systems. However, if you want Windows to be able to read it, you'll need it to be FAT32 (both Windows and Linux handles this filesystem fine!), and you need to create the shared partition, when you install Windows. (I.e. if you have Windows installed now, and would like to have an extra shared drive with Linux, you can't create it when you install Linux, since then Windows won't find it).&lt;/p&gt;

&lt;p&gt;You might not know what a partition is, but it's quite simple. Imagine you have your harddisk, and you split it into smaller chunks, and store stuff here. As humans remember, and learn better by illustrations, I made one (bear with me, I'm bad at drawing):&lt;/p&gt;

&lt;a href=&quot;http://img42.imageshack.us/img42/6572/partitions.png&quot;&gt;&lt;img style=&quot;border: 0px initial initial;&quot; title=&quot;Paritions&quot; src=&quot;http://img42.imageshack.us/img42/6572/partitions.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;200&quot; /&gt;&lt;/a&gt;

&lt;p&gt;Imagine partition 1 being Windows, partition 2 Linux and partition 3 the shared drive. (I didn't include the swap one here, as it would be pretty small on the scale, but&lt;strong&gt; it is&lt;/strong&gt; a partition like the other ones)&lt;/p&gt;

&lt;p&gt;Now, you should decide how your partition scheme should be like. There's tons of options, for this example (to keep it simple) we'll go with this, please check the comments for other ways to do it:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Windows partition (partition we install Windows on) [NTFS]&lt;/li&gt;
	&lt;li&gt;Linux Partition (partition we install Linux on) [EXT4]
&lt;ul&gt;
	&lt;li&gt;Swap partition (partition we install swap for linux on) [swap]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
	&lt;li&gt;Shared Partition (partition we want Linux and Windows to share) [FAT]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alright, let's get to it. For this &quot;guide&quot; I assume we are working on a 500 gb harddrive (plan how you partition your own harddrive). And we want a shared partition between the two systems. This should give a basic knowledge of what you need to do.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Boot from Windows CD
&lt;ul&gt;
	&lt;li&gt;If you happen to not being able to boot from it, go into your BIOS and set CD as first for boot priority
&lt;ul&gt;
	&lt;li&gt;Should you have trouble doing this, google your way around for it. There's &lt;strong&gt;plenty&lt;/strong&gt; of articles on that subject&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
	&lt;li&gt;Create two partitions in Windows partition manager
&lt;ul&gt;
	&lt;li&gt;Partition to install Windows on [100 GB]&lt;/li&gt;
	&lt;li&gt;Partition we share between Linux and Windows, which we format to Fat32 later [300 GB]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
	&lt;li&gt;Install Windows on the first partition
&lt;ul&gt;
	&lt;li&gt;Format it with NTFS (not quick, since quick doesn't examine for bad stuff)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
	&lt;li&gt;Now wait a while for Windows to install
&lt;ul&gt;
	&lt;li&gt;Enter your valid serial when prompted&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
	&lt;li&gt;When your done it should boot&lt;/li&gt;
	&lt;li&gt;Install your drivers
&lt;ul&gt;
	&lt;li&gt;You'll probably have to restart a few times&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
	&lt;li&gt;Go to &quot;My Computer&quot;, and open the D:/ drive (the shared partition)
&lt;ul&gt;
	&lt;li&gt;It'll ask you to format&lt;/li&gt;
	&lt;li&gt;Do so, and pick FAT32 as the filesystem&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
	&lt;li&gt;Boot up in Windows, and take out the Windows CD
&lt;ul&gt;
	&lt;li&gt;Then put in the Linux CD (Ubuntu, Fedora or whatever distroration you picked)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
	&lt;li&gt;Restart your computer&lt;/li&gt;
	&lt;li&gt;Now, there's two kind of installation cd's:
&lt;ul&gt;
	&lt;li&gt;LiveCD: (Fedora has this), it'll boot into the Fedora system. On the desktop there will be a shortcut named something like &quot;Install on your system&quot;, click this and you'll get into the installation&lt;/li&gt;
	&lt;li&gt;Normal: (Ubuntu has this), you'll be greeted by a screen where you can pick install, check disc etc. Pick install.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
	&lt;li&gt;Now you should be taken through some installation stuff, time, location, etc.&lt;/li&gt;
	&lt;li&gt;At some point, you'll be at a partition manager.
&lt;ul&gt;
	&lt;li&gt;Ubuntu (Maybe Mint, and other ubuntu based systems too, not sure): You have an option to install the system side by side with the Windows system, do this. Does all the partitioning stuff for you! This will take the rest of the space, ~ 100 GB.&lt;/li&gt;
	&lt;li&gt;Fedora (And probably any other system): Create a new partition named: &quot;/&quot; (this is the Linux system) [93 GB]. And a &quot;/boot&quot; partition [200 mb] (This is probably for Fedora only, never tried any other system than Ubuntu and Fedora, check your systems installation guide). And then you need the swap one, just pick swap from the dropdown of filesystems. To figure your size, follow this guideline [6 GB for me, as I have 4 GB ram]:&lt;/li&gt;
&lt;/ul&gt;
&lt;ul style=&quot;padding-left: 1,6em; list-style-image: url(http://docs.fedoraproject.org/install-guide/f11/en-US/html/Common_Content/images/dot.png); list-style-type: circle;&quot;&gt;
	&lt;li style=&quot;line-height: 1,29em; padding-top: 0px; margin-top: 0em; padding-bottom: 0px; margin-bottom: 0,4em;&quot;&gt;
&lt;div style=&quot;line-height: 1,29em; padding-top: 0px; margin-top: 0em; padding-bottom: 0px; margin-bottom: 0,3em;&quot;&gt;M = Amount of RAM in GB, and S = Amount of swap in GB:&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul style=&quot;padding-left: 1,6em; list-style-image: url(http://docs.fedoraproject.org/install-guide/f11/en-US/html/Common_Content/images/dot.png); list-style-type: circle;&quot;&gt;
	&lt;li style=&quot;line-height: 1,29em; padding-top: 0px; margin-top: 0em; padding-bottom: 0px; margin-bottom: 0,4em;&quot;&gt;
&lt;pre style=&quot;line-height: 1,29em; font-family: 'liberation mono', 'bitstream vera mono', 'dejavu mono', monospace; display: block; background-color: #eeeeee; margin-bottom: 0,3em; padding-top: 0,5em; padding-right: 1em; padding-bottom: 0,5em; padding-left: 1em; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;If M &amp;lt; 2
	S = M *2
Else
	S = M + 2&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
	&lt;li&gt;Follow the last configuration&lt;/li&gt;
	&lt;li&gt;Now, your system restarts and you should see a list of different systems to choose from (remember to take our your CD, so you don't boot the installation CD again), when you boot (i.e. Windows and Linux distroration):
&lt;ul&gt;
	&lt;li&gt;Try to boot Windows
&lt;ul&gt;
	&lt;li&gt;Test shared drive&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
	&lt;li&gt;Restart&lt;/li&gt;
	&lt;li&gt;Boot Linux
&lt;ul&gt;
	&lt;li&gt;Test shared drive&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
	&lt;li&gt;And everything should be working great! You should be able to access the shared drive on both systems!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I can &lt;strong&gt;not&lt;/strong&gt; take any responsibility for &lt;strong&gt;any&lt;/strong&gt; damage you may cause to your system, while following this guide. It's written only to give a overview of what you need to do, in order to create a dual boot system.&lt;/p&gt;
</content>
 </entry>
 
</feed>
